{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// // import React from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// // import React, { useEffect } from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   useEffect(() => {\n// //     dispatch(fetchTasks());\n// //   }, [dispatch]);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//     dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const reorderedTasks = [...tasks];\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//     movedTask.status = result.destination.droppableId;\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//     dispatch(updateTask(movedTask));\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={handleDragEnd}>\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n//         {['To Do', 'In Progress', 'Done'].map(status => (\n//           <Droppable key={status} droppableId={status}>\n//             {(provided) => (\n//               <div\n//                 {...provided.droppableProps}\n//                 ref={provided.innerRef}\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n//               >\n//                 <h3>{status}</h3>\n//                 {tasks\n//                   .filter(task => task.status === status)\n//                   .map((task, index) => (\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                       {(provided) => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             ...provided.draggableProps.style,\n//                             padding: '16px',\n//                             margin: '4px',\n//                             backgroundColor: 'white',\n//                             borderRadius: '4px',\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                           }}\n//                         >\n//                           <h4>{task.title}</h4>\n//                           <p>{task.description}</p>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                 {provided.placeholder}\n//               </div>\n//             )}\n//           </Droppable>\n//         ))}\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks);\n\n//     // Örnek verileri ilk başta Local Storage'a eklemek için\n//     useEffect(() => {\n//         const sampleTasks = [\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\n//             { id: '3', title: 'Görev 3', status: 'Done' },\n//         ];\n\n//         if (!localStorage.getItem('tasks')) {\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         userSelect: 'none',\n//                                                         padding: 16,\n//                                                         margin: '0 0 8px 0',\n//                                                         minHeight: '50px',\n//                                                         backgroundColor: '#fff',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: '2px',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         const sampleTasks = [\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\n//             { id: '3', title: 'Görev 3', status: 'Done' },\n//         ];\n\n//         if (!localStorage.getItem('tasks')) {\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter((task: any) => task.status === status) // task için tip tanımladık\n//                                     .map((task: any, index: number) => ( // task ve index için tip tanımladık\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         userSelect: 'none',\n//                                                         padding: 16,\n//                                                         margin: '0 0 8px 0',\n//                                                         minHeight: '50px',\n//                                                         backgroundColor: '#fff',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: '2px',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch: AppDispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map(status => (\n//                     // <Droppable key={status} droppableId={status}>\n//                     //     {(provided) => (\n//                     //         <div\n//                     //             ref={provided.innerRef}\n//                     //             {...provided.droppableProps}\n//                     //             style={{ width: '30%', minHeight: '500px', border: '1px solid lightgrey', borderRadius: '4px', padding: '8px', margin: '0 8px' }}\n//                     //         >\n//                     //             <h2>{status}</h2>\n//                     //             {tasks\n//                     //                 .filter(task => task.status === status)\n//                     //                 .map((task, index) => (\n//                     //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                     //                         {(provided) => (\n//                     //                             <div\n//                     //                                 ref={provided.innerRef}\n//                     //                                 {...provided.draggableProps}\n//                     //                                 {...provided.dragHandleProps}\n//                     //                                 style={{\n//                     //                                     userSelect: 'none',\n//                     //                                     padding: '16px',\n//                     //                                     margin: '0 0 8px 0',\n//                     //                                     borderRadius: '4px',\n//                     //                                     backgroundColor: 'white',\n//                     //                                     border: '1px solid lightgrey',\n//                     //                                     ...provided.draggableProps.style,\n//                     //                                 }}\n//                     //                             >\n//                     //                                 {task.title}\n//                     //                             </div>\n//                     //                         )}\n//                     //                     </Draggable>\n//                     //                 ))}\n//                     //             {provided.placeholder}\n//                     //         </div>\n//                     //     )}\n//                     // </Droppable>\n//                     <Droppable droppableId={status} key={status}>\n//     {(provided) => (\n//         <div ref={provided.innerRef} {...provided.droppableProps}>\n//             {tasks.filter(task => task.status === status).map((task, index) => (\n//                 <Draggable key={task.id} draggableId={task.id} index={index}>\n//                     {(provided) => (\n//                         <div \n//                             ref={provided.innerRef} \n//                             {...provided.draggableProps} \n//                             {...provided.dragHandleProps}\n//                         >\n//                             {task.title}\n//                         </div>\n//                     )}\n//                 </Draggable>\n//             ))}\n//             {provided.placeholder}\n//         </div>\n//     )}\n// </Droppable>\n\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch = useDispatch();\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//       dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: DropResult) => {\n//       if (!result.destination) return;\n\n//       const reorderedTasks = [...tasks];\n//       const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//       movedTask.status = result.destination.droppableId;\n//       reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//       dispatch(updateTaskInState(reorderedTasks));\n//   };\n\n//   const statuses = ['To Do', 'In Progress', 'Done'];\n\n//   return (\n//       <DragDropContext onDragEnd={handleDragEnd}>\n//           <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//               {statuses.map((status) => (\n//                   <Droppable droppableId={status} key={status}>\n//                       {(provided) => (\n//                           <div\n//                               ref={provided.innerRef}\n//                               {...provided.droppableProps}\n//                               style={{\n//                                   backgroundColor: '#f4f4f4',\n//                                   padding: 16,\n//                                   width: 250,\n//                                   minHeight: 500,\n//                               }}\n//                           >\n//                               <h2>{status}</h2>\n//                               {tasks\n//                                   .filter(task => task.status === status)\n//                                   .map((task, index) => (\n//                                       <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                           {(provided) => (\n//                                               <div\n//                                                   ref={provided.innerRef}\n//                                                   {...provided.draggableProps}\n//                                                   {...provided.dragHandleProps}\n//                                                   style={{\n//                                                       marginBottom: 16,\n//                                                       padding: 16,\n//                                                       backgroundColor: 'white',\n//                                                       border: '1px solid lightgrey',\n//                                                       borderRadius: 4,\n//                                                       ...provided.draggableProps.style\n//                                                   }}\n//                                               >\n//                                                   {task.title}\n//                                               </div>\n//                                           )}\n//                                       </Draggable>\n//                                   ))}\n//                               {provided.placeholder}\n//                           </div>\n//                       )}\n//                   </Droppable>\n//               ))}\n//           </div>\n//       </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz.\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status) => (\n//                     <Droppable droppableId={status} key={status}>\n//                         {(provided) => (\n//                             <div\n//                                 ref={provided.innerRef}\n//                                 {...provided.droppableProps}\n//                                 style={{\n//                                     backgroundColor: '#f4f4f4',\n//                                     padding: 16,\n//                                     width: 250,\n//                                     minHeight: 500,\n//                                 }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: 16,\n//                                                         padding: 16,\n//                                                         backgroundColor: 'white',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: 4,\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>(); // Dispatch hook'u özelleştiriyoruz\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId; // Durumunu güncelle\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));  // Görevlerin sırasını ve durumunu günceller\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { fetchTasks, updateTask, deleteTask, addTask } from '../redux/tasksSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks.tasks);\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const newTasks = tasks.map(task => {\n      if (task.id === result.draggableId) {\n        return {\n          ...task,\n          status: result.destination.droppableId\n        };\n      }\n      return task;\n    });\n    dispatch(updateTask(newTasks));\n  };\n  const handleDeleteTask = taskId => {\n    dispatch(deleteTask(taskId));\n  };\n  const handleAddTask = task => {\n    dispatch(addTask(task));\n  };\n  const statuses = ['To Do', 'In Progress', 'Done'];\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: statuses.map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: status,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          className: \"kanban-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 33\n          }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              className: \"kanban-task\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: task.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 53\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleDeleteTask(task.id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 865,\n                columnNumber: 53\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 858,\n              columnNumber: 49\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 41\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 29\n        }, this)\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 843,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 842,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"V+7ELchWxtjQUcQV6jtuL3Ris1U=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","DragDropContext","Droppable","Draggable","fetchTasks","updateTask","deleteTask","addTask","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","tasks","state","handleDragEnd","result","destination","newTasks","map","task","id","draggableId","status","droppableId","handleDeleteTask","taskId","handleAddTask","statuses","onDragEnd","children","className","provided","droppableProps","ref","innerRef","fileName","_jsxFileName","lineNumber","columnNumber","filter","index","draggableProps","dragHandleProps","title","onClick","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// // import React from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// // import React, { useEffect } from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   useEffect(() => {\r\n// //     dispatch(fetchTasks());\r\n// //   }, [dispatch]);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: any) => {\r\n//     if (!result.destination) return;\r\n\r\n//     const reorderedTasks = [...tasks];\r\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//     movedTask.status = result.destination.droppableId;\r\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//     dispatch(updateTask(movedTask));\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={handleDragEnd}>\r\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n//         {['To Do', 'In Progress', 'Done'].map(status => (\r\n//           <Droppable key={status} droppableId={status}>\r\n//             {(provided) => (\r\n//               <div\r\n//                 {...provided.droppableProps}\r\n//                 ref={provided.innerRef}\r\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n//               >\r\n//                 <h3>{status}</h3>\r\n//                 {tasks\r\n//                   .filter(task => task.status === status)\r\n//                   .map((task, index) => (\r\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                       {(provided) => (\r\n//                         <div\r\n//                           ref={provided.innerRef}\r\n//                           {...provided.draggableProps}\r\n//                           {...provided.dragHandleProps}\r\n//                           style={{\r\n//                             ...provided.draggableProps.style,\r\n//                             padding: '16px',\r\n//                             margin: '4px',\r\n//                             backgroundColor: 'white',\r\n//                             borderRadius: '4px',\r\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                           }}\r\n//                         >\r\n//                           <h4>{task.title}</h4>\r\n//                           <p>{task.description}</p>\r\n//                         </div>\r\n//                       )}\r\n//                     </Draggable>\r\n//                   ))}\r\n//                 {provided.placeholder}\r\n//               </div>\r\n//             )}\r\n//           </Droppable>\r\n//         ))}\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks);\r\n\r\n//     // Örnek verileri ilk başta Local Storage'a eklemek için\r\n//     useEffect(() => {\r\n//         const sampleTasks = [\r\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\r\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Görev 3', status: 'Done' },\r\n//         ];\r\n\r\n//         if (!localStorage.getItem('tasks')) {\r\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         userSelect: 'none',\r\n//                                                         padding: 16,\r\n//                                                         margin: '0 0 8px 0',\r\n//                                                         minHeight: '50px',\r\n//                                                         backgroundColor: '#fff',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: '2px',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         const sampleTasks = [\r\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\r\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Görev 3', status: 'Done' },\r\n//         ];\r\n\r\n//         if (!localStorage.getItem('tasks')) {\r\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter((task: any) => task.status === status) // task için tip tanımladık\r\n//                                     .map((task: any, index: number) => ( // task ve index için tip tanımladık\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         userSelect: 'none',\r\n//                                                         padding: 16,\r\n//                                                         margin: '0 0 8px 0',\r\n//                                                         minHeight: '50px',\r\n//                                                         backgroundColor: '#fff',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: '2px',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch: AppDispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map(status => (\r\n//                     // <Droppable key={status} droppableId={status}>\r\n//                     //     {(provided) => (\r\n//                     //         <div\r\n//                     //             ref={provided.innerRef}\r\n//                     //             {...provided.droppableProps}\r\n//                     //             style={{ width: '30%', minHeight: '500px', border: '1px solid lightgrey', borderRadius: '4px', padding: '8px', margin: '0 8px' }}\r\n//                     //         >\r\n//                     //             <h2>{status}</h2>\r\n//                     //             {tasks\r\n//                     //                 .filter(task => task.status === status)\r\n//                     //                 .map((task, index) => (\r\n//                     //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                     //                         {(provided) => (\r\n//                     //                             <div\r\n//                     //                                 ref={provided.innerRef}\r\n//                     //                                 {...provided.draggableProps}\r\n//                     //                                 {...provided.dragHandleProps}\r\n//                     //                                 style={{\r\n//                     //                                     userSelect: 'none',\r\n//                     //                                     padding: '16px',\r\n//                     //                                     margin: '0 0 8px 0',\r\n//                     //                                     borderRadius: '4px',\r\n//                     //                                     backgroundColor: 'white',\r\n//                     //                                     border: '1px solid lightgrey',\r\n//                     //                                     ...provided.draggableProps.style,\r\n//                     //                                 }}\r\n//                     //                             >\r\n//                     //                                 {task.title}\r\n//                     //                             </div>\r\n//                     //                         )}\r\n//                     //                     </Draggable>\r\n//                     //                 ))}\r\n//                     //             {provided.placeholder}\r\n//                     //         </div>\r\n//                     //     )}\r\n//                     // </Droppable>\r\n//                     <Droppable droppableId={status} key={status}>\r\n//     {(provided) => (\r\n//         <div ref={provided.innerRef} {...provided.droppableProps}>\r\n//             {tasks.filter(task => task.status === status).map((task, index) => (\r\n//                 <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                     {(provided) => (\r\n//                         <div \r\n//                             ref={provided.innerRef} \r\n//                             {...provided.draggableProps} \r\n//                             {...provided.dragHandleProps}\r\n//                         >\r\n//                             {task.title}\r\n//                         </div>\r\n//                     )}\r\n//                 </Draggable>\r\n//             ))}\r\n//             {provided.placeholder}\r\n//         </div>\r\n//     )}\r\n// </Droppable>\r\n\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch = useDispatch();\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//       dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: DropResult) => {\r\n//       if (!result.destination) return;\r\n\r\n//       const reorderedTasks = [...tasks];\r\n//       const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//       movedTask.status = result.destination.droppableId;\r\n//       reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//       dispatch(updateTaskInState(reorderedTasks));\r\n//   };\r\n\r\n//   const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//   return (\r\n//       <DragDropContext onDragEnd={handleDragEnd}>\r\n//           <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//               {statuses.map((status) => (\r\n//                   <Droppable droppableId={status} key={status}>\r\n//                       {(provided) => (\r\n//                           <div\r\n//                               ref={provided.innerRef}\r\n//                               {...provided.droppableProps}\r\n//                               style={{\r\n//                                   backgroundColor: '#f4f4f4',\r\n//                                   padding: 16,\r\n//                                   width: 250,\r\n//                                   minHeight: 500,\r\n//                               }}\r\n//                           >\r\n//                               <h2>{status}</h2>\r\n//                               {tasks\r\n//                                   .filter(task => task.status === status)\r\n//                                   .map((task, index) => (\r\n//                                       <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                           {(provided) => (\r\n//                                               <div\r\n//                                                   ref={provided.innerRef}\r\n//                                                   {...provided.draggableProps}\r\n//                                                   {...provided.dragHandleProps}\r\n//                                                   style={{\r\n//                                                       marginBottom: 16,\r\n//                                                       padding: 16,\r\n//                                                       backgroundColor: 'white',\r\n//                                                       border: '1px solid lightgrey',\r\n//                                                       borderRadius: 4,\r\n//                                                       ...provided.draggableProps.style\r\n//                                                   }}\r\n//                                               >\r\n//                                                   {task.title}\r\n//                                               </div>\r\n//                                           )}\r\n//                                       </Draggable>\r\n//                                   ))}\r\n//                               {provided.placeholder}\r\n//                           </div>\r\n//                       )}\r\n//                   </Droppable>\r\n//               ))}\r\n//           </div>\r\n//       </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz.\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status) => (\r\n//                     <Droppable droppableId={status} key={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 ref={provided.innerRef}\r\n//                                 {...provided.droppableProps}\r\n//                                 style={{\r\n//                                     backgroundColor: '#f4f4f4',\r\n//                                     padding: 16,\r\n//                                     width: 250,\r\n//                                     minHeight: 500,\r\n//                                 }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: 16,\r\n//                                                         padding: 16,\r\n//                                                         backgroundColor: 'white',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: 4,\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>(); // Dispatch hook'u özelleştiriyoruz\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId; // Durumunu güncelle\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));  // Görevlerin sırasını ve durumunu günceller\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\nimport { RootState } from '../redux/store';\r\nimport { fetchTasks, updateTask, deleteTask, addTask } from '../redux/tasksSlice';\r\nimport { Task } from '../types';\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks());\r\n    }, [dispatch]);\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        if (!result.destination) return;\r\n\r\n        const newTasks = tasks.map(task => {\r\n            if (task.id === result.draggableId) {\r\n                return { ...task, status: result.destination.droppableId };\r\n            }\r\n            return task;\r\n        });\r\n\r\n        dispatch(updateTask(newTasks)); \r\n    };\r\n\r\n    const handleDeleteTask = (taskId: string) => {\r\n        dispatch(deleteTask(taskId));\r\n    };\r\n\r\n    const handleAddTask = (task: Task) => {\r\n        dispatch(addTask(task));\r\n    };\r\n\r\n    const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n            <div className=\"kanban-board\">\r\n                {statuses.map(status => (\r\n                    <Droppable key={status} droppableId={status}>\r\n                        {(provided) => (\r\n                            <div\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                className=\"kanban-column\"\r\n                            >\r\n                                <h2>{status}</h2>\r\n                                {tasks\r\n                                    .filter(task => task.status === status)\r\n                                    .map((task, index) => (\r\n                                        <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    className=\"kanban-task\"\r\n                                                >\r\n                                                    <div>{task.title}</div>\r\n                                                    <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAoB,qBAAqB;AAEvF,SAASC,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAEC,OAAO,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlF,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAC9B,MAAMc,KAAK,GAAGb,WAAW,CAAEc,KAAgB,IAAKA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAElEf,SAAS,CAAC,MAAM;IACZc,QAAQ,CAACR,UAAU,CAAC,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACQ,QAAQ,CAAC,CAAC;EAEd,MAAMG,aAAa,GAAIC,MAAkB,IAAK;IAC1C,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;IAEzB,MAAMC,QAAQ,GAAGL,KAAK,CAACM,GAAG,CAACC,IAAI,IAAI;MAC/B,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACM,WAAW,EAAE;QAChC,OAAO;UAAE,GAAGF,IAAI;UAAEG,MAAM,EAAEP,MAAM,CAACC,WAAW,CAACO;QAAY,CAAC;MAC9D;MACA,OAAOJ,IAAI;IACf,CAAC,CAAC;IAEFR,QAAQ,CAACP,UAAU,CAACa,QAAQ,CAAC,CAAC;EAClC,CAAC;EAED,MAAMO,gBAAgB,GAAIC,MAAc,IAAK;IACzCd,QAAQ,CAACN,UAAU,CAACoB,MAAM,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,aAAa,GAAIP,IAAU,IAAK;IAClCR,QAAQ,CAACL,OAAO,CAACa,IAAI,CAAC,CAAC;EAC3B,CAAC;EAED,MAAMQ,QAAQ,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,MAAM,CAAC;EAEjD,oBACInB,OAAA,CAACR,eAAe;IAAC4B,SAAS,EAAEd,aAAc;IAAAe,QAAA,eACtCrB,OAAA;MAAKsB,SAAS,EAAC,cAAc;MAAAD,QAAA,EACxBF,QAAQ,CAACT,GAAG,CAACI,MAAM,iBAChBd,OAAA,CAACP,SAAS;QAAcsB,WAAW,EAAED,MAAO;QAAAO,QAAA,EACtCE,QAAQ,iBACNvB,OAAA;UAAA,GACQuB,QAAQ,CAACC,cAAc;UAC3BC,GAAG,EAAEF,QAAQ,CAACG,QAAS;UACvBJ,SAAS,EAAC,eAAe;UAAAD,QAAA,gBAEzBrB,OAAA;YAAAqB,QAAA,EAAKP;UAAM;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAChB1B,KAAK,CACD2B,MAAM,CAACpB,IAAI,IAAIA,IAAI,CAACG,MAAM,KAAKA,MAAM,CAAC,CACtCJ,GAAG,CAAC,CAACC,IAAI,EAAEqB,KAAK,kBACbhC,OAAA,CAACN,SAAS;YAAemB,WAAW,EAAEF,IAAI,CAACC,EAAG;YAACoB,KAAK,EAAEA,KAAM;YAAAX,QAAA,EACtDE,QAAQ,iBACNvB,OAAA;cACIyB,GAAG,EAAEF,QAAQ,CAACG,QAAS;cAAA,GACnBH,QAAQ,CAACU,cAAc;cAAA,GACvBV,QAAQ,CAACW,eAAe;cAC5BZ,SAAS,EAAC,aAAa;cAAAD,QAAA,gBAEvBrB,OAAA;gBAAAqB,QAAA,EAAMV,IAAI,CAACwB;cAAK;gBAAAR,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACvB9B,OAAA;gBAAQoC,OAAO,EAAEA,CAAA,KAAMpB,gBAAgB,CAACL,IAAI,CAACC,EAAE,CAAE;gBAAAS,QAAA,EAAC;cAAM;gBAAAM,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChE;UACR,GAXWnB,IAAI,CAACC,EAAE;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAYZ,CACd,CAAC,EACLP,QAAQ,CAACc,WAAW;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MACR,GA3BWhB,MAAM;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA4BX,CACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE1B,CAAC;AAAC5B,EAAA,CApEID,WAAqB;EAAA,QACNX,WAAW,EACdC,WAAW;AAAA;AAAA+C,EAAA,GAFvBrC,WAAqB;AAsE3B,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}