{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// // import React from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// // import React, { useEffect } from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   useEffect(() => {\n// //     dispatch(fetchTasks());\n// //   }, [dispatch]);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//     dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const reorderedTasks = [...tasks];\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//     movedTask.status = result.destination.droppableId;\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//     dispatch(updateTask(movedTask));\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={handleDragEnd}>\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n//         {['To Do', 'In Progress', 'Done'].map(status => (\n//           <Droppable key={status} droppableId={status}>\n//             {(provided) => (\n//               <div\n//                 {...provided.droppableProps}\n//                 ref={provided.innerRef}\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n//               >\n//                 <h3>{status}</h3>\n//                 {tasks\n//                   .filter(task => task.status === status)\n//                   .map((task, index) => (\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                       {(provided) => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             ...provided.draggableProps.style,\n//                             padding: '16px',\n//                             margin: '4px',\n//                             backgroundColor: 'white',\n//                             borderRadius: '4px',\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                           }}\n//                         >\n//                           <h4>{task.title}</h4>\n//                           <p>{task.description}</p>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                 {provided.placeholder}\n//               </div>\n//             )}\n//           </Droppable>\n//         ))}\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks);\n\n//     // Örnek verileri ilk başta Local Storage'a eklemek için\n//     useEffect(() => {\n//         const sampleTasks = [\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\n//             { id: '3', title: 'Görev 3', status: 'Done' },\n//         ];\n\n//         if (!localStorage.getItem('tasks')) {\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         userSelect: 'none',\n//                                                         padding: 16,\n//                                                         margin: '0 0 8px 0',\n//                                                         minHeight: '50px',\n//                                                         backgroundColor: '#fff',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: '2px',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         const sampleTasks = [\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\n//             { id: '3', title: 'Görev 3', status: 'Done' },\n//         ];\n\n//         if (!localStorage.getItem('tasks')) {\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter((task: any) => task.status === status) // task için tip tanımladık\n//                                     .map((task: any, index: number) => ( // task ve index için tip tanımladık\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         userSelect: 'none',\n//                                                         padding: 16,\n//                                                         margin: '0 0 8px 0',\n//                                                         minHeight: '50px',\n//                                                         backgroundColor: '#fff',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: '2px',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch: AppDispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map(status => (\n//                     // <Droppable key={status} droppableId={status}>\n//                     //     {(provided) => (\n//                     //         <div\n//                     //             ref={provided.innerRef}\n//                     //             {...provided.droppableProps}\n//                     //             style={{ width: '30%', minHeight: '500px', border: '1px solid lightgrey', borderRadius: '4px', padding: '8px', margin: '0 8px' }}\n//                     //         >\n//                     //             <h2>{status}</h2>\n//                     //             {tasks\n//                     //                 .filter(task => task.status === status)\n//                     //                 .map((task, index) => (\n//                     //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                     //                         {(provided) => (\n//                     //                             <div\n//                     //                                 ref={provided.innerRef}\n//                     //                                 {...provided.draggableProps}\n//                     //                                 {...provided.dragHandleProps}\n//                     //                                 style={{\n//                     //                                     userSelect: 'none',\n//                     //                                     padding: '16px',\n//                     //                                     margin: '0 0 8px 0',\n//                     //                                     borderRadius: '4px',\n//                     //                                     backgroundColor: 'white',\n//                     //                                     border: '1px solid lightgrey',\n//                     //                                     ...provided.draggableProps.style,\n//                     //                                 }}\n//                     //                             >\n//                     //                                 {task.title}\n//                     //                             </div>\n//                     //                         )}\n//                     //                     </Draggable>\n//                     //                 ))}\n//                     //             {provided.placeholder}\n//                     //         </div>\n//                     //     )}\n//                     // </Droppable>\n//                     <Droppable droppableId={status} key={status}>\n//     {(provided) => (\n//         <div ref={provided.innerRef} {...provided.droppableProps}>\n//             {tasks.filter(task => task.status === status).map((task, index) => (\n//                 <Draggable key={task.id} draggableId={task.id} index={index}>\n//                     {(provided) => (\n//                         <div \n//                             ref={provided.innerRef} \n//                             {...provided.draggableProps} \n//                             {...provided.dragHandleProps}\n//                         >\n//                             {task.title}\n//                         </div>\n//                     )}\n//                 </Draggable>\n//             ))}\n//             {provided.placeholder}\n//         </div>\n//     )}\n// </Droppable>\n\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch = useDispatch();\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//       dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: DropResult) => {\n//       if (!result.destination) return;\n\n//       const reorderedTasks = [...tasks];\n//       const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//       movedTask.status = result.destination.droppableId;\n//       reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//       dispatch(updateTaskInState(reorderedTasks));\n//   };\n\n//   const statuses = ['To Do', 'In Progress', 'Done'];\n\n//   return (\n//       <DragDropContext onDragEnd={handleDragEnd}>\n//           <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//               {statuses.map((status) => (\n//                   <Droppable droppableId={status} key={status}>\n//                       {(provided) => (\n//                           <div\n//                               ref={provided.innerRef}\n//                               {...provided.droppableProps}\n//                               style={{\n//                                   backgroundColor: '#f4f4f4',\n//                                   padding: 16,\n//                                   width: 250,\n//                                   minHeight: 500,\n//                               }}\n//                           >\n//                               <h2>{status}</h2>\n//                               {tasks\n//                                   .filter(task => task.status === status)\n//                                   .map((task, index) => (\n//                                       <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                           {(provided) => (\n//                                               <div\n//                                                   ref={provided.innerRef}\n//                                                   {...provided.draggableProps}\n//                                                   {...provided.dragHandleProps}\n//                                                   style={{\n//                                                       marginBottom: 16,\n//                                                       padding: 16,\n//                                                       backgroundColor: 'white',\n//                                                       border: '1px solid lightgrey',\n//                                                       borderRadius: 4,\n//                                                       ...provided.draggableProps.style\n//                                                   }}\n//                                               >\n//                                                   {task.title}\n//                                               </div>\n//                                           )}\n//                                       </Draggable>\n//                                   ))}\n//                               {provided.placeholder}\n//                           </div>\n//                       )}\n//                   </Droppable>\n//               ))}\n//           </div>\n//       </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz.\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status) => (\n//                     <Droppable droppableId={status} key={status}>\n//                         {(provided) => (\n//                             <div\n//                                 ref={provided.innerRef}\n//                                 {...provided.droppableProps}\n//                                 style={{\n//                                     backgroundColor: '#f4f4f4',\n//                                     padding: 16,\n//                                     width: 250,\n//                                     minHeight: 500,\n//                                 }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: 16,\n//                                                         padding: 16,\n//                                                         backgroundColor: 'white',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: 4,\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>(); // Dispatch hook'u özelleştiriyoruz\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId; // Durumunu güncelle\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));  // Görevlerin sırasını ve durumunu günceller\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks.tasks);\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [editingTaskTitle, setEditingTaskTitle] = useState('');\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const reorderedTasks = [...tasks];\n    const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n    movedTask.status = result.destination.droppableId;\n    reorderedTasks.splice(result.destination.index, 0, movedTask);\n    dispatch(updateTaskInState(reorderedTasks));\n  };\n  const handleDeleteTask = taskId => {\n    dispatch(deleteTask(taskId));\n  };\n  const handleAddTask = () => {\n    const newTask = {\n      id: Math.random().toString(36).substr(2, 9),\n      // Benzersiz ID oluştur\n      title: newTaskTitle,\n      status: 'To Do'\n    };\n    dispatch(addTask(newTask));\n    setNewTaskTitle('');\n  };\n  const handleEditTask = taskId => {\n    setEditingTaskId(taskId);\n    const task = tasks.find(task => task.id === taskId);\n    if (task) {\n      setEditingTaskTitle(task.title);\n    }\n  };\n  const handleUpdateTask = () => {\n    const updatedTasks = tasks.map(task => task.id === editingTaskId ? {\n      ...task,\n      title: editingTaskTitle\n    } : task);\n    dispatch(updateTaskInState(updatedTasks));\n    setEditingTaskId(null);\n    setEditingTaskTitle('');\n  };\n  const statuses = ['To Do', 'In Progress', 'Done'];\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTaskTitle,\n        onChange: e => setNewTaskTitle(e.target.value),\n        placeholder: \"Yeni g\\xF6rev ekle...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddTask,\n        children: \"Ekle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 866,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: statuses.map((status, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: status,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          style: {\n            margin: '0 10px',\n            padding: '10px',\n            width: '30%',\n            backgroundColor: '#f8f8f8',\n            borderRadius: '4px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 884,\n            columnNumber: 33\n          }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: {\n                marginBottom: '8px',\n                padding: '16px',\n                backgroundColor: 'white',\n                borderRadius: '4px',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n                ...provided.draggableProps.style\n              },\n              children: editingTaskId === task.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: editingTaskTitle,\n                  onChange: e => setEditingTaskTitle(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 905,\n                  columnNumber: 61\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleUpdateTask,\n                  children: \"G\\xFCncelle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 910,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 904,\n                columnNumber: 57\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [task.title, /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEditTask(task.id),\n                  children: \"D\\xFCzenle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 915,\n                  columnNumber: 61\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDeleteTask(task.id),\n                  children: \"Sil\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 916,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 913,\n                columnNumber: 57\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 890,\n              columnNumber: 49\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 888,\n            columnNumber: 41\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 875,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 865,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"CZIOBjGow2EmcGTzeOoHNR5Gd0E=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask, deleteTask, addTask } from '../redux/tasksSlice';\n// import { Task } from '../types';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const newTasks = tasks.map(task => {\n//             if (task.id === result.draggableId) {\n//                 return { ...task, status: result.destination.droppableId };\n//             }\n//             return task;\n//         });\n\n//         dispatch(updateTask(newTasks)); \n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = (task: Task) => {\n//         dispatch(addTask(task));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div className=\"kanban-board\">\n//                 {statuses.map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 className=\"kanban-column\"\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     className=\"kanban-task\"\n//                                                 >\n//                                                     <div>{task.title}</div>\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchTasks","updateTaskInState","deleteTask","addTask","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","tasks","state","newTaskTitle","setNewTaskTitle","editingTaskId","setEditingTaskId","editingTaskTitle","setEditingTaskTitle","handleDragEnd","result","destination","reorderedTasks","movedTask","splice","source","index","status","droppableId","handleDeleteTask","taskId","handleAddTask","newTask","id","Math","random","toString","substr","title","handleEditTask","task","find","handleUpdateTask","updatedTasks","map","statuses","onDragEnd","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","display","justifyContent","provided","droppableProps","ref","innerRef","margin","padding","width","backgroundColor","borderRadius","filter","draggableId","draggableProps","dragHandleProps","marginBottom","boxShadow","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// // import React from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// // import React, { useEffect } from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   useEffect(() => {\r\n// //     dispatch(fetchTasks());\r\n// //   }, [dispatch]);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: any) => {\r\n//     if (!result.destination) return;\r\n\r\n//     const reorderedTasks = [...tasks];\r\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//     movedTask.status = result.destination.droppableId;\r\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//     dispatch(updateTask(movedTask));\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={handleDragEnd}>\r\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n//         {['To Do', 'In Progress', 'Done'].map(status => (\r\n//           <Droppable key={status} droppableId={status}>\r\n//             {(provided) => (\r\n//               <div\r\n//                 {...provided.droppableProps}\r\n//                 ref={provided.innerRef}\r\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n//               >\r\n//                 <h3>{status}</h3>\r\n//                 {tasks\r\n//                   .filter(task => task.status === status)\r\n//                   .map((task, index) => (\r\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                       {(provided) => (\r\n//                         <div\r\n//                           ref={provided.innerRef}\r\n//                           {...provided.draggableProps}\r\n//                           {...provided.dragHandleProps}\r\n//                           style={{\r\n//                             ...provided.draggableProps.style,\r\n//                             padding: '16px',\r\n//                             margin: '4px',\r\n//                             backgroundColor: 'white',\r\n//                             borderRadius: '4px',\r\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                           }}\r\n//                         >\r\n//                           <h4>{task.title}</h4>\r\n//                           <p>{task.description}</p>\r\n//                         </div>\r\n//                       )}\r\n//                     </Draggable>\r\n//                   ))}\r\n//                 {provided.placeholder}\r\n//               </div>\r\n//             )}\r\n//           </Droppable>\r\n//         ))}\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks);\r\n\r\n//     // Örnek verileri ilk başta Local Storage'a eklemek için\r\n//     useEffect(() => {\r\n//         const sampleTasks = [\r\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\r\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Görev 3', status: 'Done' },\r\n//         ];\r\n\r\n//         if (!localStorage.getItem('tasks')) {\r\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         userSelect: 'none',\r\n//                                                         padding: 16,\r\n//                                                         margin: '0 0 8px 0',\r\n//                                                         minHeight: '50px',\r\n//                                                         backgroundColor: '#fff',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: '2px',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         const sampleTasks = [\r\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\r\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Görev 3', status: 'Done' },\r\n//         ];\r\n\r\n//         if (!localStorage.getItem('tasks')) {\r\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter((task: any) => task.status === status) // task için tip tanımladık\r\n//                                     .map((task: any, index: number) => ( // task ve index için tip tanımladık\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         userSelect: 'none',\r\n//                                                         padding: 16,\r\n//                                                         margin: '0 0 8px 0',\r\n//                                                         minHeight: '50px',\r\n//                                                         backgroundColor: '#fff',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: '2px',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch: AppDispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map(status => (\r\n//                     // <Droppable key={status} droppableId={status}>\r\n//                     //     {(provided) => (\r\n//                     //         <div\r\n//                     //             ref={provided.innerRef}\r\n//                     //             {...provided.droppableProps}\r\n//                     //             style={{ width: '30%', minHeight: '500px', border: '1px solid lightgrey', borderRadius: '4px', padding: '8px', margin: '0 8px' }}\r\n//                     //         >\r\n//                     //             <h2>{status}</h2>\r\n//                     //             {tasks\r\n//                     //                 .filter(task => task.status === status)\r\n//                     //                 .map((task, index) => (\r\n//                     //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                     //                         {(provided) => (\r\n//                     //                             <div\r\n//                     //                                 ref={provided.innerRef}\r\n//                     //                                 {...provided.draggableProps}\r\n//                     //                                 {...provided.dragHandleProps}\r\n//                     //                                 style={{\r\n//                     //                                     userSelect: 'none',\r\n//                     //                                     padding: '16px',\r\n//                     //                                     margin: '0 0 8px 0',\r\n//                     //                                     borderRadius: '4px',\r\n//                     //                                     backgroundColor: 'white',\r\n//                     //                                     border: '1px solid lightgrey',\r\n//                     //                                     ...provided.draggableProps.style,\r\n//                     //                                 }}\r\n//                     //                             >\r\n//                     //                                 {task.title}\r\n//                     //                             </div>\r\n//                     //                         )}\r\n//                     //                     </Draggable>\r\n//                     //                 ))}\r\n//                     //             {provided.placeholder}\r\n//                     //         </div>\r\n//                     //     )}\r\n//                     // </Droppable>\r\n//                     <Droppable droppableId={status} key={status}>\r\n//     {(provided) => (\r\n//         <div ref={provided.innerRef} {...provided.droppableProps}>\r\n//             {tasks.filter(task => task.status === status).map((task, index) => (\r\n//                 <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                     {(provided) => (\r\n//                         <div \r\n//                             ref={provided.innerRef} \r\n//                             {...provided.draggableProps} \r\n//                             {...provided.dragHandleProps}\r\n//                         >\r\n//                             {task.title}\r\n//                         </div>\r\n//                     )}\r\n//                 </Draggable>\r\n//             ))}\r\n//             {provided.placeholder}\r\n//         </div>\r\n//     )}\r\n// </Droppable>\r\n\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch = useDispatch();\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//       dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: DropResult) => {\r\n//       if (!result.destination) return;\r\n\r\n//       const reorderedTasks = [...tasks];\r\n//       const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//       movedTask.status = result.destination.droppableId;\r\n//       reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//       dispatch(updateTaskInState(reorderedTasks));\r\n//   };\r\n\r\n//   const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//   return (\r\n//       <DragDropContext onDragEnd={handleDragEnd}>\r\n//           <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//               {statuses.map((status) => (\r\n//                   <Droppable droppableId={status} key={status}>\r\n//                       {(provided) => (\r\n//                           <div\r\n//                               ref={provided.innerRef}\r\n//                               {...provided.droppableProps}\r\n//                               style={{\r\n//                                   backgroundColor: '#f4f4f4',\r\n//                                   padding: 16,\r\n//                                   width: 250,\r\n//                                   minHeight: 500,\r\n//                               }}\r\n//                           >\r\n//                               <h2>{status}</h2>\r\n//                               {tasks\r\n//                                   .filter(task => task.status === status)\r\n//                                   .map((task, index) => (\r\n//                                       <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                           {(provided) => (\r\n//                                               <div\r\n//                                                   ref={provided.innerRef}\r\n//                                                   {...provided.draggableProps}\r\n//                                                   {...provided.dragHandleProps}\r\n//                                                   style={{\r\n//                                                       marginBottom: 16,\r\n//                                                       padding: 16,\r\n//                                                       backgroundColor: 'white',\r\n//                                                       border: '1px solid lightgrey',\r\n//                                                       borderRadius: 4,\r\n//                                                       ...provided.draggableProps.style\r\n//                                                   }}\r\n//                                               >\r\n//                                                   {task.title}\r\n//                                               </div>\r\n//                                           )}\r\n//                                       </Draggable>\r\n//                                   ))}\r\n//                               {provided.placeholder}\r\n//                           </div>\r\n//                       )}\r\n//                   </Droppable>\r\n//               ))}\r\n//           </div>\r\n//       </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz.\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status) => (\r\n//                     <Droppable droppableId={status} key={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 ref={provided.innerRef}\r\n//                                 {...provided.droppableProps}\r\n//                                 style={{\r\n//                                     backgroundColor: '#f4f4f4',\r\n//                                     padding: 16,\r\n//                                     width: 250,\r\n//                                     minHeight: 500,\r\n//                                 }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: 16,\r\n//                                                         padding: 16,\r\n//                                                         backgroundColor: 'white',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: 4,\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>(); // Dispatch hook'u özelleştiriyoruz\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId; // Durumunu güncelle\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));  // Görevlerin sırasını ve durumunu günceller\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\r\nimport { RootState, AppDispatch } from '../redux/store';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n    const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks());\r\n    }, [dispatch]);\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        if (!result.destination) return;\r\n\r\n        const reorderedTasks = [...tasks];\r\n        const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n        movedTask.status = result.destination.droppableId;\r\n        reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n        dispatch(updateTaskInState(reorderedTasks));\r\n    };\r\n\r\n    const handleDeleteTask = (taskId: string) => {\r\n        dispatch(deleteTask(taskId));\r\n    };\r\n\r\n    const handleAddTask = () => {\r\n        const newTask = {\r\n            id: Math.random().toString(36).substr(2, 9), // Benzersiz ID oluştur\r\n            title: newTaskTitle,\r\n            status: 'To Do'\r\n        };\r\n        dispatch(addTask(newTask));\r\n        setNewTaskTitle('');\r\n    };\r\n\r\n    const handleEditTask = (taskId: string) => {\r\n        setEditingTaskId(taskId);\r\n        const task = tasks.find(task => task.id === taskId);\r\n        if (task) {\r\n            setEditingTaskTitle(task.title);\r\n        }\r\n    };\r\n\r\n    const handleUpdateTask = () => {\r\n        const updatedTasks = tasks.map(task => \r\n            task.id === editingTaskId ? { ...task, title: editingTaskTitle } : task\r\n        );\r\n        dispatch(updateTaskInState(updatedTasks));\r\n        setEditingTaskId(null);\r\n        setEditingTaskTitle('');\r\n    };\r\n\r\n    const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newTaskTitle}\r\n                    onChange={(e) => setNewTaskTitle(e.target.value)}\r\n                    placeholder=\"Yeni görev ekle...\"\r\n                />\r\n                <button onClick={handleAddTask}>Ekle</button>\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                {statuses.map((status, index) => (\r\n                    <Droppable droppableId={status} key={index}>\r\n                        {(provided) => (\r\n                            <div\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n                            >\r\n                                <h2>{status}</h2>\r\n                                {tasks\r\n                                    .filter(task => task.status === status)\r\n                                    .map((task, index) => (\r\n                                        <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={{\r\n                                                        marginBottom: '8px',\r\n                                                        padding: '16px',\r\n                                                        backgroundColor: 'white',\r\n                                                        borderRadius: '4px',\r\n                                                        boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n                                                        ...provided.draggableProps.style\r\n                                                    }}\r\n                                                >\r\n                                                    {editingTaskId === task.id ? (\r\n                                                        <div>\r\n                                                            <input\r\n                                                                type=\"text\"\r\n                                                                value={editingTaskTitle}\r\n                                                                onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n                                                            />\r\n                                                            <button onClick={handleUpdateTask}>Güncelle</button>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div>\r\n                                                            {task.title}\r\n                                                            <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n                                                            <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask, deleteTask, addTask } from '../redux/tasksSlice';\r\n// import { Task } from '../types';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const newTasks = tasks.map(task => {\r\n//             if (task.id === result.draggableId) {\r\n//                 return { ...task, status: result.destination.droppableId };\r\n//             }\r\n//             return task;\r\n//         });\r\n\r\n//         dispatch(updateTask(newTasks)); \r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = (task: Task) => {\r\n//         dispatch(addTask(task));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div className=\"kanban-board\">\r\n//                 {statuses.map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 className=\"kanban-column\"\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     className=\"kanban-task\"\r\n//                                                 >\r\n//                                                     <div>{task.title}</div>\r\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA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AAAC,YAAA;MAAA,OAiD/B,CACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE1B,CAAC;AAAChD,EAAA,CA1HID,WAAqB;EAAA,QACNX,WAAW,EACdC,WAAW;AAAA;AAAA+E,EAAA,GAFvBrE,WAAqB;AA4H3B,eAAeA,WAAW;;AAI1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}