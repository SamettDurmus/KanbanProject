{"ast":null,"code":"// // import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// // interface Task {\n// //   id: string;\n// //   title: string;\n// //   description: string;\n// //   status: string;\n// // }\n\n// // interface TasksState {\n// //   tasks: Task[];\n// // }\n\n// // const initialState: TasksState = {\n// //   tasks: [],\n// // };\n\n// // const tasksSlice = createSlice({\n// //   name: 'tasks',\n// //   initialState,\n// //   reducers: {\n// //     setTasks(state, action: PayloadAction<Task[]>) {\n// //       state.tasks = action.payload;\n// //     },\n// //     addTask(state, action: PayloadAction<Task>) {\n// //       state.tasks.push(action.payload);\n// //     },\n// //     updateTask(state, action: PayloadAction<Task>) {\n// //       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n// //       if (index !== -1) {\n// //         state.tasks[index] = action.payload;\n// //       }\n// //     },\n// //     deleteTask(state, action: PayloadAction<string>) {\n// //       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n// //     },\n// //   },\n// // });\n\n// // export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\n// // export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../utils/api';\n\n// interface Task {\n//   id: string;\n//   title: string;\n//   description: string;\n//   status: string;\n// }\n\n// interface TasksState {\n//   tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//   tasks: [\n//     { id: '1', title: 'Görev 1', description: 'İlk görev', status: 'Yapılacak' },\n//   // ...\n//   ],\n// };\n\n// // Async Thunks\n// export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\n//   const response = await api.get('/tasks');\n//   return response.data;\n// });\n\n// export const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\n//   const response = await api.post('/tasks', task);\n//   return response.data;\n// });\n\n// export const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\n//   const response = await api.put(`/tasks/${task.id}`, task);\n//   return response.data;\n// });\n\n// export const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\n//   await api.delete(`/tasks/${id}`);\n//   return id;\n// });\n\n// const tasksSlice = createSlice({\n//   name: 'tasks',\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//     });\n//     builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\n//       state.tasks.push(action.payload);\n//     });\n//     builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//       if (index !== -1) {\n//         state.tasks[index] = action.payload;\n//       }\n//     });\n//     builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//     });\n//   },\n// });\n\n// export default tasksSlice.reducer;\n\n//  import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n//  import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: []\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         }\n//     }\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n//export default tasksSlice.reducer;\n\n// src/redux/tasksSlice.ts\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: []\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         }\n//     }\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// src/redux/tasksSlice.ts\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: [\n//         { id: '1', title: 'Task 1', status: 'To Do' },\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\n//         { id: '3', title: 'Task 3', status: 'Done' },\n//     ],\n// };\n\n// export const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         },\n//     },\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  tasks: [{\n    id: '1',\n    title: 'Task 1',\n    status: 'To Do'\n  }, {\n    id: '2',\n    title: 'Task 2',\n    status: 'In Progress'\n  }, {\n    id: '3',\n    title: 'Task 3',\n    status: 'Done'\n  }]\n};\nexport const tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    setTasks: (state, action) => {\n      state.tasks = action.payload;\n    },\n    updateTaskInState: (state, action) => {\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n    }\n  }\n});\nexport const {\n  setTasks,\n  updateTaskInState\n} = tasksSlice.actions;\nexport const fetchTasks = () => dispatch => {\n  const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n  dispatch(setTasks(tasks));\n};\nexport const updateTask = task => dispatch => {\n  const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n  const updatedTasks = tasks.map(t => t.id === task.id ? task : t);\n  localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  dispatch(updateTaskInState(task));\n};\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","id","title","status","tasksSlice","name","reducers","setTasks","state","action","payload","updateTaskInState","index","findIndex","task","actions","fetchTasks","dispatch","JSON","parse","localStorage","getItem","updateTask","updatedTasks","map","t","setItem","stringify","reducer"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/redux/tasksSlice.ts"],"sourcesContent":["// // import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// // interface Task {\r\n// //   id: string;\r\n// //   title: string;\r\n// //   description: string;\r\n// //   status: string;\r\n// // }\r\n\r\n// // interface TasksState {\r\n// //   tasks: Task[];\r\n// // }\r\n\r\n// // const initialState: TasksState = {\r\n// //   tasks: [],\r\n// // };\r\n\r\n// // const tasksSlice = createSlice({\r\n// //   name: 'tasks',\r\n// //   initialState,\r\n// //   reducers: {\r\n// //     setTasks(state, action: PayloadAction<Task[]>) {\r\n// //       state.tasks = action.payload;\r\n// //     },\r\n// //     addTask(state, action: PayloadAction<Task>) {\r\n// //       state.tasks.push(action.payload);\r\n// //     },\r\n// //     updateTask(state, action: PayloadAction<Task>) {\r\n// //       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n// //       if (index !== -1) {\r\n// //         state.tasks[index] = action.payload;\r\n// //       }\r\n// //     },\r\n// //     deleteTask(state, action: PayloadAction<string>) {\r\n// //       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n// //     },\r\n// //   },\r\n// // });\r\n\r\n// // export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\r\n// // export default tasksSlice.reducer;\r\n\r\n// import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import api from '../utils/api';\r\n\r\n// interface Task {\r\n//   id: string;\r\n//   title: string;\r\n//   description: string;\r\n//   status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//   tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//   tasks: [\r\n//     { id: '1', title: 'Görev 1', description: 'İlk görev', status: 'Yapılacak' },\r\n//   // ...\r\n//   ],\r\n// };\r\n\r\n// // Async Thunks\r\n// export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\r\n//   const response = await api.get('/tasks');\r\n//   return response.data;\r\n// });\r\n\r\n// export const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\r\n//   const response = await api.post('/tasks', task);\r\n//   return response.data;\r\n// });\r\n\r\n// export const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\r\n//   const response = await api.put(`/tasks/${task.id}`, task);\r\n//   return response.data;\r\n// });\r\n\r\n// export const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\r\n//   await api.delete(`/tasks/${id}`);\r\n//   return id;\r\n// });\r\n\r\n// const tasksSlice = createSlice({\r\n//   name: 'tasks',\r\n//   initialState,\r\n//   reducers: {},\r\n//   extraReducers: (builder) => {\r\n//     builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//     });\r\n//     builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n//       state.tasks.push(action.payload);\r\n//     });\r\n//     builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//       if (index !== -1) {\r\n//         state.tasks[index] = action.payload;\r\n//       }\r\n//     });\r\n//     builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\r\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//     });\r\n//   },\r\n// });\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\n//  import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n//  import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: []\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n//export default tasksSlice.reducer;\r\n\r\n\r\n// src/redux/tasksSlice.ts\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: []\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n// src/redux/tasksSlice.ts\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: [\r\n//         { id: '1', title: 'Task 1', status: 'To Do' },\r\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\r\n//         { id: '3', title: 'Task 3', status: 'Done' },\r\n//     ],\r\n// };\r\n\r\n// export const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk } from './store';\r\n\r\ninterface Task {\r\n    id: string;\r\n    title: string;\r\n    status: string;\r\n}\r\n\r\ninterface TasksState {\r\n    tasks: Task[];\r\n}\r\n\r\nconst initialState: TasksState = {\r\n    tasks: [\r\n        { id: '1', title: 'Task 1', status: 'To Do' },\r\n        { id: '2', title: 'Task 2', status: 'In Progress' },\r\n        { id: '3', title: 'Task 3', status: 'Done' },\r\n    ],\r\n};\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        setTasks: (state, action: PayloadAction<Task[]>) => {\r\n            state.tasks = action.payload;\r\n        },\r\n        updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n            if (index !== -1) {\r\n                state.tasks[index] = action.payload;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\nexport const fetchTasks = (): AppThunk => dispatch => {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n    dispatch(setTasks(tasks));\r\n};\r\n\r\nexport const updateTask = (task: Task): AppThunk => dispatch => {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n    const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n    dispatch(updateTaskInState(task));\r\n};\r\n\r\nexport default tasksSlice.reducer;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,WAAW,QAAuB,kBAAkB;AAa7D,MAAMC,YAAwB,GAAG;EAC7BC,KAAK,EAAE,CACH;IAAEC,EAAE,EAAE,GAAG;IAAEC,KAAK,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAQ,CAAC,EAC7C;IAAEF,EAAE,EAAE,GAAG;IAAEC,KAAK,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAc,CAAC,EACnD;IAAEF,EAAE,EAAE,GAAG;IAAEC,KAAK,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAO,CAAC;AAEpD,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAClCO,IAAI,EAAE,OAAO;EACbN,YAAY;EACZO,QAAQ,EAAE;IACNC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MAChDD,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,iBAAiB,EAAEA,CAACH,KAAK,EAAEC,MAA2B,KAAK;MACvD,MAAMG,KAAK,GAAGJ,KAAK,CAACR,KAAK,CAACa,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACb,EAAE,KAAKQ,MAAM,CAACC,OAAO,CAACT,EAAE,CAAC;MAC1E,IAAIW,KAAK,KAAK,CAAC,CAAC,EAAE;QACdJ,KAAK,CAACR,KAAK,CAACY,KAAK,CAAC,GAAGH,MAAM,CAACC,OAAO;MACvC;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,QAAQ;EAAEI;AAAkB,CAAC,GAAGP,UAAU,CAACW,OAAO;AAEjE,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAgBC,QAAQ,IAAI;EAClD,MAAMjB,KAAK,GAAGkB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;EAC/DJ,QAAQ,CAACV,QAAQ,CAACP,KAAK,CAAC,CAAC;AAC7B,CAAC;AAED,OAAO,MAAMsB,UAAU,GAAIR,IAAU,IAAeG,QAAQ,IAAI;EAC5D,MAAMjB,KAAK,GAAGkB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;EAC/D,MAAME,YAAY,GAAGvB,KAAK,CAACwB,GAAG,CAAEC,CAAO,IAAKA,CAAC,CAACxB,EAAE,KAAKa,IAAI,CAACb,EAAE,GAAGa,IAAI,GAAGW,CAAC,CAAC;EACxEL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAER,IAAI,CAACS,SAAS,CAACJ,YAAY,CAAC,CAAC;EAC3DN,QAAQ,CAACN,iBAAiB,CAACG,IAAI,CAAC,CAAC;AACrC,CAAC;AAED,eAAeV,UAAU,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}