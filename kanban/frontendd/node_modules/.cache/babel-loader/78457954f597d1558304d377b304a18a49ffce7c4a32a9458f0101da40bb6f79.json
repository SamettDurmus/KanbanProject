{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// // import React from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// // import React, { useEffect } from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   useEffect(() => {\n// //     dispatch(fetchTasks());\n// //   }, [dispatch]);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//     dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const reorderedTasks = [...tasks];\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//     movedTask.status = result.destination.droppableId;\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//     dispatch(updateTask(movedTask));\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={handleDragEnd}>\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n//         {['To Do', 'In Progress', 'Done'].map(status => (\n//           <Droppable key={status} droppableId={status}>\n//             {(provided) => (\n//               <div\n//                 {...provided.droppableProps}\n//                 ref={provided.innerRef}\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n//               >\n//                 <h3>{status}</h3>\n//                 {tasks\n//                   .filter(task => task.status === status)\n//                   .map((task, index) => (\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                       {(provided) => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             ...provided.draggableProps.style,\n//                             padding: '16px',\n//                             margin: '4px',\n//                             backgroundColor: 'white',\n//                             borderRadius: '4px',\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                           }}\n//                         >\n//                           <h4>{task.title}</h4>\n//                           <p>{task.description}</p>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                 {provided.placeholder}\n//               </div>\n//             )}\n//           </Droppable>\n//         ))}\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks);\n\n//     // Örnek verileri ilk başta Local Storage'a eklemek için\n//     useEffect(() => {\n//         const sampleTasks = [\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\n//             { id: '3', title: 'Görev 3', status: 'Done' },\n//         ];\n\n//         if (!localStorage.getItem('tasks')) {\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         userSelect: 'none',\n//                                                         padding: 16,\n//                                                         margin: '0 0 8px 0',\n//                                                         minHeight: '50px',\n//                                                         backgroundColor: '#fff',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: '2px',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         const sampleTasks = [\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\n//             { id: '3', title: 'Görev 3', status: 'Done' },\n//         ];\n\n//         if (!localStorage.getItem('tasks')) {\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n//         }\n//     }, []);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter((task: any) => task.status === status) // task için tip tanımladık\n//                                     .map((task: any, index: number) => ( // task ve index için tip tanımladık\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         userSelect: 'none',\n//                                                         padding: 16,\n//                                                         margin: '0 0 8px 0',\n//                                                         minHeight: '50px',\n//                                                         backgroundColor: '#fff',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: '2px',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch: AppDispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: any) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map(status => (\n//                     // <Droppable key={status} droppableId={status}>\n//                     //     {(provided) => (\n//                     //         <div\n//                     //             ref={provided.innerRef}\n//                     //             {...provided.droppableProps}\n//                     //             style={{ width: '30%', minHeight: '500px', border: '1px solid lightgrey', borderRadius: '4px', padding: '8px', margin: '0 8px' }}\n//                     //         >\n//                     //             <h2>{status}</h2>\n//                     //             {tasks\n//                     //                 .filter(task => task.status === status)\n//                     //                 .map((task, index) => (\n//                     //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                     //                         {(provided) => (\n//                     //                             <div\n//                     //                                 ref={provided.innerRef}\n//                     //                                 {...provided.draggableProps}\n//                     //                                 {...provided.dragHandleProps}\n//                     //                                 style={{\n//                     //                                     userSelect: 'none',\n//                     //                                     padding: '16px',\n//                     //                                     margin: '0 0 8px 0',\n//                     //                                     borderRadius: '4px',\n//                     //                                     backgroundColor: 'white',\n//                     //                                     border: '1px solid lightgrey',\n//                     //                                     ...provided.draggableProps.style,\n//                     //                                 }}\n//                     //                             >\n//                     //                                 {task.title}\n//                     //                             </div>\n//                     //                         )}\n//                     //                     </Draggable>\n//                     //                 ))}\n//                     //             {provided.placeholder}\n//                     //         </div>\n//                     //     )}\n//                     // </Droppable>\n//                     <Droppable droppableId={status} key={status}>\n//     {(provided) => (\n//         <div ref={provided.innerRef} {...provided.droppableProps}>\n//             {tasks.filter(task => task.status === status).map((task, index) => (\n//                 <Draggable key={task.id} draggableId={task.id} index={index}>\n//                     {(provided) => (\n//                         <div \n//                             ref={provided.innerRef} \n//                             {...provided.draggableProps} \n//                             {...provided.dragHandleProps}\n//                         >\n//                             {task.title}\n//                         </div>\n//                     )}\n//                 </Draggable>\n//             ))}\n//             {provided.placeholder}\n//         </div>\n//     )}\n// </Droppable>\n\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch = useDispatch();\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//       dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: DropResult) => {\n//       if (!result.destination) return;\n\n//       const reorderedTasks = [...tasks];\n//       const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//       movedTask.status = result.destination.droppableId;\n//       reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//       dispatch(updateTaskInState(reorderedTasks));\n//   };\n\n//   const statuses = ['To Do', 'In Progress', 'Done'];\n\n//   return (\n//       <DragDropContext onDragEnd={handleDragEnd}>\n//           <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//               {statuses.map((status) => (\n//                   <Droppable droppableId={status} key={status}>\n//                       {(provided) => (\n//                           <div\n//                               ref={provided.innerRef}\n//                               {...provided.droppableProps}\n//                               style={{\n//                                   backgroundColor: '#f4f4f4',\n//                                   padding: 16,\n//                                   width: 250,\n//                                   minHeight: 500,\n//                               }}\n//                           >\n//                               <h2>{status}</h2>\n//                               {tasks\n//                                   .filter(task => task.status === status)\n//                                   .map((task, index) => (\n//                                       <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                           {(provided) => (\n//                                               <div\n//                                                   ref={provided.innerRef}\n//                                                   {...provided.draggableProps}\n//                                                   {...provided.dragHandleProps}\n//                                                   style={{\n//                                                       marginBottom: 16,\n//                                                       padding: 16,\n//                                                       backgroundColor: 'white',\n//                                                       border: '1px solid lightgrey',\n//                                                       borderRadius: 4,\n//                                                       ...provided.draggableProps.style\n//                                                   }}\n//                                               >\n//                                                   {task.title}\n//                                               </div>\n//                                           )}\n//                                       </Draggable>\n//                                   ))}\n//                               {provided.placeholder}\n//                           </div>\n//                       )}\n//                   </Droppable>\n//               ))}\n//           </div>\n//       </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz.\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status) => (\n//                     <Droppable droppableId={status} key={status}>\n//                         {(provided) => (\n//                             <div\n//                                 ref={provided.innerRef}\n//                                 {...provided.droppableProps}\n//                                 style={{\n//                                     backgroundColor: '#f4f4f4',\n//                                     padding: 16,\n//                                     width: 250,\n//                                     minHeight: 500,\n//                                 }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: 16,\n//                                                         padding: 16,\n//                                                         backgroundColor: 'white',\n//                                                         border: '1px solid lightgrey',\n//                                                         borderRadius: 4,\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>(); // Dispatch hook'u özelleştiriyoruz\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId; // Durumunu güncelle\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));  // Görevlerin sırasını ve durumunu günceller\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {task.title}\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = () => {\n//         const newTask = {\n//             id: Math.random().toString(36).substr(2, 9), // Benzersiz ID oluştur\n//             title: newTaskTitle,\n//             status: 'To Do'\n//         };\n//         dispatch(addTask(newTask));\n//         setNewTaskTitle('');\n//     };\n\n//     const handleEditTask = (taskId: string) => {\n//         setEditingTaskId(taskId);\n//         const task = tasks.find(task => task.id === taskId);\n//         if (task) {\n//             setEditingTaskTitle(task.title);\n//         }\n//     };\n\n//     const handleUpdateTask = () => {\n//         const updatedTasks = tasks.map(task => \n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle } : task\n//         );\n//         dispatch(updateTaskInState(updatedTasks));\n//         setEditingTaskId(null);\n//         setEditingTaskTitle('');\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     value={newTaskTitle}\n//                     onChange={(e) => setNewTaskTitle(e.target.value)}\n//                     placeholder=\"Yeni görev ekle...\"\n//                 />\n//                 <button onClick={handleAddTask}>Ekle</button>\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {editingTaskId === task.id ? (\n//                                                         <div>\n//                                                             <input\n//                                                                 type=\"text\"\n//                                                                 value={editingTaskTitle}\n//                                                                 onChange={(e) => setEditingTaskTitle(e.target.value)}\n//                                                             />\n//                                                             <button onClick={handleUpdateTask}>Güncelle</button>\n//                                                         </div>\n//                                                     ) : (\n//                                                         <div>\n//                                                             {task.title}\n//                                                             <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\n//                                                             <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                         </div>\n//                                                     )}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = () => {\n//         const newTask = {\n//             id: Math.random().toString(36).substr(2, 9), // Benzersiz ID oluştur\n//             title: newTaskTitle,\n//             status: 'To Do'\n//         };\n//         dispatch(addTask(newTask));\n//         setNewTaskTitle('');\n//     };\n\n//     const handleEditTask = (taskId: string) => {\n//         setEditingTaskId(taskId);\n//         const task = tasks.find(task => task.id === taskId);\n//         if (task) {\n//             setEditingTaskTitle(task.title);\n//             setEditingTaskStatus(task.status);\n//         }\n//     };\n\n//     const handleUpdateTask = () => {\n//         const updatedTasks = tasks.map(task => \n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\n//         );\n//         dispatch(updateTaskInState(updatedTasks));\n//         setEditingTaskId(null);\n//         setEditingTaskTitle('');\n//         setEditingTaskStatus('To Do');\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div>\n//                 <input\n//                     type=\"text\"\n//                     value={newTaskTitle}\n//                     onChange={(e) => setNewTaskTitle(e.target.value)}\n//                     placeholder=\"Yeni görev ekle...\"\n//                 />\n//                 <button onClick={handleAddTask}>Ekle</button>\n//             </div>\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                 {statuses.map((status, index) => (\n//                     <Droppable droppableId={status} key={index}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     style={{\n//                                                         marginBottom: '8px',\n//                                                         padding: '16px',\n//                                                         backgroundColor: 'white',\n//                                                         borderRadius: '4px',\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                         ...provided.draggableProps.style\n//                                                     }}\n//                                                 >\n//                                                     {editingTaskId === task.id ? (\n//                                                         <div>\n//                                                             <input\n//                                                                 type=\"text\"\n//                                                                 value={editingTaskTitle}\n//                                                                 onChange={(e) => setEditingTaskTitle(e.target.value)}\n//                                                             />\n//                                                             <select\n//                                                                 value={editingTaskStatus}\n//                                                                 onChange={(e) => setEditingTaskStatus(e.target.value)}\n//                                                             >\n//                                                                 {statuses.map((status) => (\n//                                                                     <option key={status} value={status}>\n//                                                                         {status}\n//                                                                     </option>\n//                                                                 ))}\n//                                                             </select>\n//                                                             <button onClick={handleUpdateTask}>Güncelle</button>\n//                                                         </div>\n//                                                     ) : (\n//                                                         <div>\n//                                                             {task.title}\n//                                                             <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\n//                                                             <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                         </div>\n//                                                     )}\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchBoards, addBoard, updateBoard, deleteTaskFromBoard } from '../redux/tasksSlice';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const boards = useSelector(state => state.boards.boards);\n  const [newBoardName, setNewBoardName] = useState('');\n  useEffect(() => {\n    dispatch(fetchBoards());\n  }, [dispatch]);\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const sourceBoardId = result.source.droppableId.split('-')[0];\n    const destinationBoardId = result.destination.droppableId.split('-')[0];\n    const sourceBoard = boards.find(board => board.id === sourceBoardId);\n    const destinationBoard = boards.find(board => board.id === destinationBoardId);\n    if (sourceBoard && destinationBoard) {\n      const [movedTask] = sourceBoard.tasks.splice(result.source.index, 1);\n      destinationBoard.tasks.splice(result.destination.index, 0, movedTask);\n      if (sourceBoardId !== destinationBoardId) {\n        movedTask.status = destinationBoard.name;\n      }\n      dispatch(updateBoard(sourceBoard));\n      dispatch(updateBoard(destinationBoard));\n    }\n  };\n  const handleAddBoard = () => {\n    const newBoard = {\n      id: (boards.length + 1).toString(),\n      name: newBoardName,\n      tasks: []\n    };\n    dispatch(addBoard(newBoard));\n    setNewBoardName('');\n  };\n  const handleDeleteTask = (boardId, taskId) => {\n    dispatch(deleteTaskFromBoard({\n      boardId,\n      taskId\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newBoardName,\n      onChange: e => setNewBoardName(e.target.value),\n      placeholder: \"Yeni Pano Ad\\u0131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddBoard,\n      children: \"Pano Ekle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: boards.map(board => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: `${board.id}-${board.name}`,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            style: {\n              margin: '0 10px',\n              padding: '10px',\n              width: '30%',\n              backgroundColor: '#f8f8f8',\n              borderRadius: '4px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: board.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1153,\n              columnNumber: 19\n            }, this), board.tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: {\n                  marginBottom: '8px',\n                  padding: '16px',\n                  backgroundColor: 'white',\n                  borderRadius: '4px',\n                  boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n                  ...provided.draggableProps.style\n                },\n                children: [task.title, /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDeleteTask(board.id, task.id),\n                  children: \"Sil\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1171,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 25\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1155,\n              columnNumber: 21\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1148,\n            columnNumber: 17\n          }, this)\n        }, board.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1134,\n    columnNumber: 5\n  }, this);\n};\n_s(KanbanBoard, \"6gO3VrfB8jgKeMGIsvtUicZfge8=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n// import { RootState } from '../redux/store';\n// import { fetchTasks, updateTask, deleteTask, addTask } from '../redux/tasksSlice';\n// import { Task } from '../types';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const newTasks = tasks.map(task => {\n//             if (task.id === result.draggableId) {\n//                 return { ...task, status: result.destination.droppableId };\n//             }\n//             return task;\n//         });\n\n//         dispatch(updateTask(newTasks)); \n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = (task: Task) => {\n//         dispatch(addTask(task));\n//     };\n\n//     const statuses = ['To Do', 'In Progress', 'Done'];\n\n//     return (\n//         <DragDropContext onDragEnd={handleDragEnd}>\n//             <div className=\"kanban-board\">\n//                 {statuses.map(status => (\n//                     <Droppable key={status} droppableId={status}>\n//                         {(provided) => (\n//                             <div\n//                                 {...provided.droppableProps}\n//                                 ref={provided.innerRef}\n//                                 className=\"kanban-column\"\n//                             >\n//                                 <h2>{status}</h2>\n//                                 {tasks\n//                                     .filter(task => task.status === status)\n//                                     .map((task, index) => (\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                             {(provided) => (\n//                                                 <div\n//                                                     ref={provided.innerRef}\n//                                                     {...provided.draggableProps}\n//                                                     {...provided.dragHandleProps}\n//                                                     className=\"kanban-task\"\n//                                                 >\n//                                                     <div>{task.title}</div>\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\n//                                                 </div>\n//                                             )}\n//                                         </Draggable>\n//                                     ))}\n//                                 {provided.placeholder}\n//                             </div>\n//                         )}\n//                     </Droppable>\n//                 ))}\n//             </div>\n//         </DragDropContext>\n//     );\n// };\n\n// export default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchBoards","addBoard","updateBoard","deleteTaskFromBoard","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","boards","state","newBoardName","setNewBoardName","handleDragEnd","result","destination","sourceBoardId","source","droppableId","split","destinationBoardId","sourceBoard","find","board","id","destinationBoard","movedTask","tasks","splice","index","status","name","handleAddBoard","newBoard","length","toString","handleDeleteTask","boardId","taskId","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDragEnd","style","display","justifyContent","map","provided","droppableProps","ref","innerRef","margin","padding","width","backgroundColor","borderRadius","task","draggableId","draggableProps","dragHandleProps","marginBottom","boxShadow","title","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// // import React from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// // import React, { useEffect } from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   useEffect(() => {\r\n// //     dispatch(fetchTasks());\r\n// //   }, [dispatch]);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: any) => {\r\n//     if (!result.destination) return;\r\n\r\n//     const reorderedTasks = [...tasks];\r\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//     movedTask.status = result.destination.droppableId;\r\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//     dispatch(updateTask(movedTask));\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={handleDragEnd}>\r\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n//         {['To Do', 'In Progress', 'Done'].map(status => (\r\n//           <Droppable key={status} droppableId={status}>\r\n//             {(provided) => (\r\n//               <div\r\n//                 {...provided.droppableProps}\r\n//                 ref={provided.innerRef}\r\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n//               >\r\n//                 <h3>{status}</h3>\r\n//                 {tasks\r\n//                   .filter(task => task.status === status)\r\n//                   .map((task, index) => (\r\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                       {(provided) => (\r\n//                         <div\r\n//                           ref={provided.innerRef}\r\n//                           {...provided.draggableProps}\r\n//                           {...provided.dragHandleProps}\r\n//                           style={{\r\n//                             ...provided.draggableProps.style,\r\n//                             padding: '16px',\r\n//                             margin: '4px',\r\n//                             backgroundColor: 'white',\r\n//                             borderRadius: '4px',\r\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                           }}\r\n//                         >\r\n//                           <h4>{task.title}</h4>\r\n//                           <p>{task.description}</p>\r\n//                         </div>\r\n//                       )}\r\n//                     </Draggable>\r\n//                   ))}\r\n//                 {provided.placeholder}\r\n//               </div>\r\n//             )}\r\n//           </Droppable>\r\n//         ))}\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks);\r\n\r\n//     // Örnek verileri ilk başta Local Storage'a eklemek için\r\n//     useEffect(() => {\r\n//         const sampleTasks = [\r\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\r\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Görev 3', status: 'Done' },\r\n//         ];\r\n\r\n//         if (!localStorage.getItem('tasks')) {\r\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         userSelect: 'none',\r\n//                                                         padding: 16,\r\n//                                                         margin: '0 0 8px 0',\r\n//                                                         minHeight: '50px',\r\n//                                                         backgroundColor: '#fff',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: '2px',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         const sampleTasks = [\r\n//             { id: '1', title: 'Görev 1', status: 'To Do' },\r\n//             { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Görev 3', status: 'Done' },\r\n//         ];\r\n\r\n//         if (!localStorage.getItem('tasks')) {\r\n//             localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n//         }\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {['To Do', 'In Progress', 'Done'].map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter((task: any) => task.status === status) // task için tip tanımladık\r\n//                                     .map((task: any, index: number) => ( // task ve index için tip tanımladık\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         userSelect: 'none',\r\n//                                                         padding: 16,\r\n//                                                         margin: '0 0 8px 0',\r\n//                                                         minHeight: '50px',\r\n//                                                         backgroundColor: '#fff',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: '2px',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch: AppDispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: any) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map(status => (\r\n//                     // <Droppable key={status} droppableId={status}>\r\n//                     //     {(provided) => (\r\n//                     //         <div\r\n//                     //             ref={provided.innerRef}\r\n//                     //             {...provided.droppableProps}\r\n//                     //             style={{ width: '30%', minHeight: '500px', border: '1px solid lightgrey', borderRadius: '4px', padding: '8px', margin: '0 8px' }}\r\n//                     //         >\r\n//                     //             <h2>{status}</h2>\r\n//                     //             {tasks\r\n//                     //                 .filter(task => task.status === status)\r\n//                     //                 .map((task, index) => (\r\n//                     //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                     //                         {(provided) => (\r\n//                     //                             <div\r\n//                     //                                 ref={provided.innerRef}\r\n//                     //                                 {...provided.draggableProps}\r\n//                     //                                 {...provided.dragHandleProps}\r\n//                     //                                 style={{\r\n//                     //                                     userSelect: 'none',\r\n//                     //                                     padding: '16px',\r\n//                     //                                     margin: '0 0 8px 0',\r\n//                     //                                     borderRadius: '4px',\r\n//                     //                                     backgroundColor: 'white',\r\n//                     //                                     border: '1px solid lightgrey',\r\n//                     //                                     ...provided.draggableProps.style,\r\n//                     //                                 }}\r\n//                     //                             >\r\n//                     //                                 {task.title}\r\n//                     //                             </div>\r\n//                     //                         )}\r\n//                     //                     </Draggable>\r\n//                     //                 ))}\r\n//                     //             {provided.placeholder}\r\n//                     //         </div>\r\n//                     //     )}\r\n//                     // </Droppable>\r\n//                     <Droppable droppableId={status} key={status}>\r\n//     {(provided) => (\r\n//         <div ref={provided.innerRef} {...provided.droppableProps}>\r\n//             {tasks.filter(task => task.status === status).map((task, index) => (\r\n//                 <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                     {(provided) => (\r\n//                         <div \r\n//                             ref={provided.innerRef} \r\n//                             {...provided.draggableProps} \r\n//                             {...provided.dragHandleProps}\r\n//                         >\r\n//                             {task.title}\r\n//                         </div>\r\n//                     )}\r\n//                 </Draggable>\r\n//             ))}\r\n//             {provided.placeholder}\r\n//         </div>\r\n//     )}\r\n// </Droppable>\r\n\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch = useDispatch();\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//       dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: DropResult) => {\r\n//       if (!result.destination) return;\r\n\r\n//       const reorderedTasks = [...tasks];\r\n//       const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//       movedTask.status = result.destination.droppableId;\r\n//       reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//       dispatch(updateTaskInState(reorderedTasks));\r\n//   };\r\n\r\n//   const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//   return (\r\n//       <DragDropContext onDragEnd={handleDragEnd}>\r\n//           <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//               {statuses.map((status) => (\r\n//                   <Droppable droppableId={status} key={status}>\r\n//                       {(provided) => (\r\n//                           <div\r\n//                               ref={provided.innerRef}\r\n//                               {...provided.droppableProps}\r\n//                               style={{\r\n//                                   backgroundColor: '#f4f4f4',\r\n//                                   padding: 16,\r\n//                                   width: 250,\r\n//                                   minHeight: 500,\r\n//                               }}\r\n//                           >\r\n//                               <h2>{status}</h2>\r\n//                               {tasks\r\n//                                   .filter(task => task.status === status)\r\n//                                   .map((task, index) => (\r\n//                                       <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                           {(provided) => (\r\n//                                               <div\r\n//                                                   ref={provided.innerRef}\r\n//                                                   {...provided.draggableProps}\r\n//                                                   {...provided.dragHandleProps}\r\n//                                                   style={{\r\n//                                                       marginBottom: 16,\r\n//                                                       padding: 16,\r\n//                                                       backgroundColor: 'white',\r\n//                                                       border: '1px solid lightgrey',\r\n//                                                       borderRadius: 4,\r\n//                                                       ...provided.draggableProps.style\r\n//                                                   }}\r\n//                                               >\r\n//                                                   {task.title}\r\n//                                               </div>\r\n//                                           )}\r\n//                                       </Draggable>\r\n//                                   ))}\r\n//                               {provided.placeholder}\r\n//                           </div>\r\n//                       )}\r\n//                   </Droppable>\r\n//               ))}\r\n//           </div>\r\n//       </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz.\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status) => (\r\n//                     <Droppable droppableId={status} key={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 ref={provided.innerRef}\r\n//                                 {...provided.droppableProps}\r\n//                                 style={{\r\n//                                     backgroundColor: '#f4f4f4',\r\n//                                     padding: 16,\r\n//                                     width: 250,\r\n//                                     minHeight: 500,\r\n//                                 }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: 16,\r\n//                                                         padding: 16,\r\n//                                                         backgroundColor: 'white',\r\n//                                                         border: '1px solid lightgrey',\r\n//                                                         borderRadius: 4,\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>(); // Dispatch hook'u özelleştiriyoruz\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTask(movedTask));  // Burada updateTask'i kullanıyoruz\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId; // Durumunu güncelle\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));  // Görevlerin sırasını ve durumunu günceller\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {task.title}\r\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\r\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = () => {\r\n//         const newTask = {\r\n//             id: Math.random().toString(36).substr(2, 9), // Benzersiz ID oluştur\r\n//             title: newTaskTitle,\r\n//             status: 'To Do'\r\n//         };\r\n//         dispatch(addTask(newTask));\r\n//         setNewTaskTitle('');\r\n//     };\r\n\r\n//     const handleEditTask = (taskId: string) => {\r\n//         setEditingTaskId(taskId);\r\n//         const task = tasks.find(task => task.id === taskId);\r\n//         if (task) {\r\n//             setEditingTaskTitle(task.title);\r\n//         }\r\n//     };\r\n\r\n//     const handleUpdateTask = () => {\r\n//         const updatedTasks = tasks.map(task => \r\n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle } : task\r\n//         );\r\n//         dispatch(updateTaskInState(updatedTasks));\r\n//         setEditingTaskId(null);\r\n//         setEditingTaskTitle('');\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     value={newTaskTitle}\r\n//                     onChange={(e) => setNewTaskTitle(e.target.value)}\r\n//                     placeholder=\"Yeni görev ekle...\"\r\n//                 />\r\n//                 <button onClick={handleAddTask}>Ekle</button>\r\n//             </div>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {editingTaskId === task.id ? (\r\n//                                                         <div>\r\n//                                                             <input\r\n//                                                                 type=\"text\"\r\n//                                                                 value={editingTaskTitle}\r\n//                                                                 onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n//                                                             />\r\n//                                                             <button onClick={handleUpdateTask}>Güncelle</button>\r\n//                                                         </div>\r\n//                                                     ) : (\r\n//                                                         <div>\r\n//                                                             {task.title}\r\n//                                                             <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n//                                                             <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                         </div>\r\n//                                                     )}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\r\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = () => {\r\n//         const newTask = {\r\n//             id: Math.random().toString(36).substr(2, 9), // Benzersiz ID oluştur\r\n//             title: newTaskTitle,\r\n//             status: 'To Do'\r\n//         };\r\n//         dispatch(addTask(newTask));\r\n//         setNewTaskTitle('');\r\n//     };\r\n\r\n//     const handleEditTask = (taskId: string) => {\r\n//         setEditingTaskId(taskId);\r\n//         const task = tasks.find(task => task.id === taskId);\r\n//         if (task) {\r\n//             setEditingTaskTitle(task.title);\r\n//             setEditingTaskStatus(task.status);\r\n//         }\r\n//     };\r\n\r\n//     const handleUpdateTask = () => {\r\n//         const updatedTasks = tasks.map(task => \r\n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\r\n//         );\r\n//         dispatch(updateTaskInState(updatedTasks));\r\n//         setEditingTaskId(null);\r\n//         setEditingTaskTitle('');\r\n//         setEditingTaskStatus('To Do');\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div>\r\n//                 <input\r\n//                     type=\"text\"\r\n//                     value={newTaskTitle}\r\n//                     onChange={(e) => setNewTaskTitle(e.target.value)}\r\n//                     placeholder=\"Yeni görev ekle...\"\r\n//                 />\r\n//                 <button onClick={handleAddTask}>Ekle</button>\r\n//             </div>\r\n//             <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                 {statuses.map((status, index) => (\r\n//                     <Droppable droppableId={status} key={index}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     style={{\r\n//                                                         marginBottom: '8px',\r\n//                                                         padding: '16px',\r\n//                                                         backgroundColor: 'white',\r\n//                                                         borderRadius: '4px',\r\n//                                                         boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                         ...provided.draggableProps.style\r\n//                                                     }}\r\n//                                                 >\r\n//                                                     {editingTaskId === task.id ? (\r\n//                                                         <div>\r\n//                                                             <input\r\n//                                                                 type=\"text\"\r\n//                                                                 value={editingTaskTitle}\r\n//                                                                 onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n//                                                             />\r\n//                                                             <select\r\n//                                                                 value={editingTaskStatus}\r\n//                                                                 onChange={(e) => setEditingTaskStatus(e.target.value)}\r\n//                                                             >\r\n//                                                                 {statuses.map((status) => (\r\n//                                                                     <option key={status} value={status}>\r\n//                                                                         {status}\r\n//                                                                     </option>\r\n//                                                                 ))}\r\n//                                                             </select>\r\n//                                                             <button onClick={handleUpdateTask}>Güncelle</button>\r\n//                                                         </div>\r\n//                                                     ) : (\r\n//                                                         <div>\r\n//                                                             {task.title}\r\n//                                                             <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n//                                                             <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                         </div>\r\n//                                                     )}\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchBoards, addBoard, updateBoard, deleteBoard, addTaskToBoard, updateTaskInBoard, deleteTaskFromBoard } from '../redux/tasksSlice';\r\nimport { RootState, AppDispatch } from '../redux/store';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const boards = useSelector((state: RootState) => state.boards.boards);\r\n  const [newBoardName, setNewBoardName] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchBoards());\r\n  }, [dispatch]);\r\n\r\n  const handleDragEnd = (result: DropResult) => {\r\n    if (!result.destination) return;\r\n\r\n    const sourceBoardId = result.source.droppableId.split('-')[0];\r\n    const destinationBoardId = result.destination.droppableId.split('-')[0];\r\n\r\n    const sourceBoard = boards.find(board => board.id === sourceBoardId);\r\n    const destinationBoard = boards.find(board => board.id === destinationBoardId);\r\n\r\n    if (sourceBoard && destinationBoard) {\r\n      const [movedTask] = sourceBoard.tasks.splice(result.source.index, 1);\r\n      destinationBoard.tasks.splice(result.destination.index, 0, movedTask);\r\n\r\n      if (sourceBoardId !== destinationBoardId) {\r\n        movedTask.status = destinationBoard.name;\r\n      }\r\n\r\n      dispatch(updateBoard(sourceBoard));\r\n      dispatch(updateBoard(destinationBoard));\r\n    }\r\n  };\r\n\r\n  const handleAddBoard = () => {\r\n    const newBoard = {\r\n      id: (boards.length + 1).toString(),\r\n      name: newBoardName,\r\n      tasks: [],\r\n    };\r\n    dispatch(addBoard(newBoard));\r\n    setNewBoardName('');\r\n  };\r\n\r\n  const handleDeleteTask = (boardId: string, taskId: string) => {\r\n    dispatch(deleteTaskFromBoard({ boardId, taskId }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" \r\n        value={newBoardName} \r\n        onChange={(e) => setNewBoardName(e.target.value)} \r\n        placeholder=\"Yeni Pano Adı\" \r\n      />\r\n      <button onClick={handleAddBoard}>Pano Ekle</button>\r\n      \r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {boards.map(board => (\r\n            <Droppable droppableId={`${board.id}-${board.name}`} key={board.id}>\r\n              {(provided) => (\r\n                <div\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                  style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n                >\r\n                  <h2>{board.name}</h2>\r\n                  {board.tasks.map((task, index) => (\r\n                    <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                      {(provided) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.draggableProps}\r\n                          {...provided.dragHandleProps}\r\n                          style={{\r\n                            marginBottom: '8px',\r\n                            padding: '16px',\r\n                            backgroundColor: 'white',\r\n                            borderRadius: '4px',\r\n                            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n                            ...provided.draggableProps.style\r\n                          }}\r\n                        >\r\n                          {task.title}\r\n                          <button onClick={() => handleDeleteTask(board.id, task.id)}>Sil</button>\r\n                        </div>\r\n                      )}\r\n                    </Draggable>\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          ))}\r\n        </div>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n// import { RootState } from '../redux/store';\r\n// import { fetchTasks, updateTask, deleteTask, addTask } from '../redux/tasksSlice';\r\n// import { Task } from '../types';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const newTasks = tasks.map(task => {\r\n//             if (task.id === result.draggableId) {\r\n//                 return { ...task, status: result.destination.droppableId };\r\n//             }\r\n//             return task;\r\n//         });\r\n\r\n//         dispatch(updateTask(newTasks)); \r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = (task: Task) => {\r\n//         dispatch(addTask(task));\r\n//     };\r\n\r\n//     const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n//     return (\r\n//         <DragDropContext onDragEnd={handleDragEnd}>\r\n//             <div className=\"kanban-board\">\r\n//                 {statuses.map(status => (\r\n//                     <Droppable key={status} droppableId={status}>\r\n//                         {(provided) => (\r\n//                             <div\r\n//                                 {...provided.droppableProps}\r\n//                                 ref={provided.innerRef}\r\n//                                 className=\"kanban-column\"\r\n//                             >\r\n//                                 <h2>{status}</h2>\r\n//                                 {tasks\r\n//                                     .filter(task => task.status === status)\r\n//                                     .map((task, index) => (\r\n//                                         <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                             {(provided) => (\r\n//                                                 <div\r\n//                                                     ref={provided.innerRef}\r\n//                                                     {...provided.draggableProps}\r\n//                                                     {...provided.dragHandleProps}\r\n//                                                     className=\"kanban-task\"\r\n//                                                 >\r\n//                                                     <div>{task.title}</div>\r\n//                                                     <button onClick={() => handleDeleteTask(task.id)}>Delete</button>\r\n//                                                 </div>\r\n//                                             )}\r\n//                                         </Draggable>\r\n//                                     ))}\r\n//                                 {provided.placeholder}\r\n//                             </div>\r\n//                         )}\r\n//                     </Droppable>\r\n//                 ))}\r\n//             </div>\r\n//         </DragDropContext>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,EAAkDC,mBAAmB,QAAQ,qBAAqB;AAE7I,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAoB,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExF,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGb,WAAW,CAAc,CAAC;EAC3C,MAAMc,MAAM,GAAGb,WAAW,CAAEc,KAAgB,IAAKA,KAAK,CAACD,MAAM,CAACA,MAAM,CAAC;EACrE,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACde,QAAQ,CAACX,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,CAACW,QAAQ,CAAC,CAAC;EAEd,MAAMK,aAAa,GAAIC,MAAkB,IAAK;IAC5C,IAAI,CAACA,MAAM,CAACC,WAAW,EAAE;IAEzB,MAAMC,aAAa,GAAGF,MAAM,CAACG,MAAM,CAACC,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7D,MAAMC,kBAAkB,GAAGN,MAAM,CAACC,WAAW,CAACG,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEvE,MAAME,WAAW,GAAGZ,MAAM,CAACa,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKR,aAAa,CAAC;IACpE,MAAMS,gBAAgB,GAAGhB,MAAM,CAACa,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKJ,kBAAkB,CAAC;IAE9E,IAAIC,WAAW,IAAII,gBAAgB,EAAE;MACnC,MAAM,CAACC,SAAS,CAAC,GAAGL,WAAW,CAACM,KAAK,CAACC,MAAM,CAACd,MAAM,CAACG,MAAM,CAACY,KAAK,EAAE,CAAC,CAAC;MACpEJ,gBAAgB,CAACE,KAAK,CAACC,MAAM,CAACd,MAAM,CAACC,WAAW,CAACc,KAAK,EAAE,CAAC,EAAEH,SAAS,CAAC;MAErE,IAAIV,aAAa,KAAKI,kBAAkB,EAAE;QACxCM,SAAS,CAACI,MAAM,GAAGL,gBAAgB,CAACM,IAAI;MAC1C;MAEAvB,QAAQ,CAACT,WAAW,CAACsB,WAAW,CAAC,CAAC;MAClCb,QAAQ,CAACT,WAAW,CAAC0B,gBAAgB,CAAC,CAAC;IACzC;EACF,CAAC;EAED,MAAMO,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,QAAQ,GAAG;MACfT,EAAE,EAAE,CAACf,MAAM,CAACyB,MAAM,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;MAClCJ,IAAI,EAAEpB,YAAY;MAClBgB,KAAK,EAAE;IACT,CAAC;IACDnB,QAAQ,CAACV,QAAQ,CAACmC,QAAQ,CAAC,CAAC;IAC5BrB,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,MAAMwB,gBAAgB,GAAGA,CAACC,OAAe,EAAEC,MAAc,KAAK;IAC5D9B,QAAQ,CAACR,mBAAmB,CAAC;MAAEqC,OAAO;MAAEC;IAAO,CAAC,CAAC,CAAC;EACpD,CAAC;EAED,oBACEjC,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MACEmC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAE9B,YAAa;MACpB+B,QAAQ,EAAGC,CAAC,IAAK/B,eAAe,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACjDI,WAAW,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACF5C,OAAA;MAAQ6C,OAAO,EAAElB,cAAe;MAAAO,QAAA,EAAC;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEnD5C,OAAA,CAACJ,eAAe;MAACkD,SAAS,EAAEtC,aAAc;MAAA0B,QAAA,eACxClC,OAAA;QAAK+C,KAAK,EAAE;UAAEC,OAAO,EAAE,MAAM;UAAEC,cAAc,EAAE;QAAgB,CAAE;QAAAf,QAAA,EAC9D9B,MAAM,CAAC8C,GAAG,CAAChC,KAAK,iBACflB,OAAA,CAACH,SAAS;UAACgB,WAAW,EAAE,GAAGK,KAAK,CAACC,EAAE,IAAID,KAAK,CAACQ,IAAI,EAAG;UAAAQ,QAAA,EAChDiB,QAAQ,iBACRnD,OAAA;YAAA,GACMmD,QAAQ,CAACC,cAAc;YAC3BC,GAAG,EAAEF,QAAQ,CAACG,QAAS;YACvBP,KAAK,EAAE;cAAEQ,MAAM,EAAE,QAAQ;cAAEC,OAAO,EAAE,MAAM;cAAEC,KAAK,EAAE,KAAK;cAAEC,eAAe,EAAE,SAAS;cAAEC,YAAY,EAAE;YAAM,CAAE;YAAAzB,QAAA,gBAE5GlC,OAAA;cAAAkC,QAAA,EAAKhB,KAAK,CAACQ;YAAI;cAAAe,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,EACpB1B,KAAK,CAACI,KAAK,CAAC4B,GAAG,CAAC,CAACU,IAAI,EAAEpC,KAAK,kBAC3BxB,OAAA,CAACF,SAAS;cAAe+D,WAAW,EAAED,IAAI,CAACzC,EAAG;cAACK,KAAK,EAAEA,KAAM;cAAAU,QAAA,EACxDiB,QAAQ,iBACRnD,OAAA;gBACEqD,GAAG,EAAEF,QAAQ,CAACG,QAAS;gBAAA,GACnBH,QAAQ,CAACW,cAAc;gBAAA,GACvBX,QAAQ,CAACY,eAAe;gBAC5BhB,KAAK,EAAE;kBACLiB,YAAY,EAAE,KAAK;kBACnBR,OAAO,EAAE,MAAM;kBACfE,eAAe,EAAE,OAAO;kBACxBC,YAAY,EAAE,KAAK;kBACnBM,SAAS,EAAE,2BAA2B;kBACtC,GAAGd,QAAQ,CAACW,cAAc,CAACf;gBAC7B,CAAE;gBAAAb,QAAA,GAED0B,IAAI,CAACM,KAAK,eACXlE,OAAA;kBAAQ6C,OAAO,EAAEA,CAAA,KAAMd,gBAAgB,CAACb,KAAK,CAACC,EAAE,EAAEyC,IAAI,CAACzC,EAAE,CAAE;kBAAAe,QAAA,EAAC;gBAAG;kBAAAO,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrE;YACN,GAlBagB,IAAI,CAACzC,EAAE;cAAAsB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAmBZ,CACZ,CAAC,EACDO,QAAQ,CAACX,WAAW;UAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB;QACN,GAhCuD1B,KAAK,CAACC,EAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiCvD,CACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACf,CAAC;AAEV,CAAC;AAAC1C,EAAA,CAjGID,WAAqB;EAAA,QACRX,WAAW,EACbC,WAAW;AAAA;AAAA4E,EAAA,GAFtBlE,WAAqB;AAmG3B,eAAeA,WAAW;;AAK1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAkE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}