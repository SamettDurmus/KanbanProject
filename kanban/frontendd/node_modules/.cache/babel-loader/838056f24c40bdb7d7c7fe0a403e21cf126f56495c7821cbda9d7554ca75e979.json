{"ast":null,"code":"// // import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// // interface Task {\n// //   id: string;\n// //   title: string;\n// //   description: string;\n// //   status: string;\n// // }\n\n// // interface TasksState {\n// //   tasks: Task[];\n// // }\n\n// // const initialState: TasksState = {\n// //   tasks: [],\n// // };\n\n// // const tasksSlice = createSlice({\n// //   name: 'tasks',\n// //   initialState,\n// //   reducers: {\n// //     setTasks(state, action: PayloadAction<Task[]>) {\n// //       state.tasks = action.payload;\n// //     },\n// //     addTask(state, action: PayloadAction<Task>) {\n// //       state.tasks.push(action.payload);\n// //     },\n// //     updateTask(state, action: PayloadAction<Task>) {\n// //       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n// //       if (index !== -1) {\n// //         state.tasks[index] = action.payload;\n// //       }\n// //     },\n// //     deleteTask(state, action: PayloadAction<string>) {\n// //       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n// //     },\n// //   },\n// // });\n\n// // export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\n// // export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../utils/api';\n\n// interface Task {\n//   id: string;\n//   title: string;\n//   description: string;\n//   status: string;\n// }\n\n// interface TasksState {\n//   tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//   tasks: [\n//     { id: '1', title: 'Görev 1', description: 'İlk görev', status: 'Yapılacak' },\n//   // ...\n//   ],\n// };\n\n// // Async Thunks\n// export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\n//   const response = await api.get('/tasks');\n//   return response.data;\n// });\n\n// export const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\n//   const response = await api.post('/tasks', task);\n//   return response.data;\n// });\n\n// export const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\n//   const response = await api.put(`/tasks/${task.id}`, task);\n//   return response.data;\n// });\n\n// export const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\n//   await api.delete(`/tasks/${id}`);\n//   return id;\n// });\n\n// const tasksSlice = createSlice({\n//   name: 'tasks',\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//     });\n//     builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\n//       state.tasks.push(action.payload);\n//     });\n//     builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//       if (index !== -1) {\n//         state.tasks[index] = action.payload;\n//       }\n//     });\n//     builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//     });\n//   },\n// });\n\n// export default tasksSlice.reducer;\n\n//  import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n//  import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: []\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         }\n//     }\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n//export default tasksSlice.reducer;\n\n// src/redux/tasksSlice.ts\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: []\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         }\n//     }\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// src/redux/tasksSlice.ts\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: [\n//         { id: '1', title: 'Task 1', status: 'To Do' },\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\n//         { id: '3', title: 'Task 3', status: 'Done' },\n//     ],\n// };\n\n// export const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         },\n//     },\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: [\n//         { id: '1', title: 'Task 1', status: 'To Do' },\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\n//         { id: '3', title: 'Task 3', status: 'Done' },\n//     ],\n// };\n\n// export const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         },\n//     },\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//   id: string;\n//   title: string;\n//   status: string;\n// }\n\n// interface TasksState {\n//   tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//   tasks: [],\n// };\n\n// const tasksSlice = createSlice({\n//   name: 'tasks',\n//   initialState,\n//   reducers: {\n//     setTasks: (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//     },\n//     addTask: (state, action: PayloadAction<Task>) => {\n//       state.tasks.push(action.payload);\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\n//     },\n//     updateTaskInState: (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\n//     },\n//     deleteTask: (state, action: PayloadAction<string>) => {\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\n//     }\n//   },\n// });\n\n// export const { setTasks, addTask, updateTaskInState, deleteTask } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//   const tasks = localStorage.getItem('tasks');\n//   if (tasks) {\n//     dispatch(setTasks(JSON.parse(tasks)));\n//   }\n// };\n\n// export default tasksSlice.reducer;\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  tasks: []\n};\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {\n    setTasks: (state, action) => {\n      state.tasks = action.payload;\n    },\n    updateTaskInState: (state, action) => {\n      state.tasks = action.payload;\n    },\n    deleteTaskInState: (state, action) => {\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n    },\n    addTaskInState: (state, action) => {\n      state.tasks.push(action.payload);\n    }\n  }\n});\nexport const {\n  setTasks,\n  updateTaskInState,\n  deleteTaskInState,\n  addTaskInState\n} = tasksSlice.actions;\nexport const fetchTasks = () => dispatch => {\n  const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n  dispatch(setTasks(tasks));\n};\nexport const updateTask = tasks => dispatch => {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n  dispatch(updateTaskInState(tasks));\n};\nexport const deleteTask = taskId => dispatch => {\n  const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n  const updatedTasks = tasks.filter(task => task.id !== taskId);\n  localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  dispatch(deleteTaskInState(taskId));\n};\nexport const addTask = task => dispatch => {\n  const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n  const updatedTasks = [...tasks, task];\n  localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  dispatch(addTaskInState(task));\n};\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","tasksSlice","name","reducers","setTasks","state","action","payload","updateTaskInState","deleteTaskInState","filter","task","id","addTaskInState","push","actions","fetchTasks","dispatch","JSON","parse","localStorage","getItem","updateTask","setItem","stringify","deleteTask","taskId","updatedTasks","addTask","reducer"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/redux/tasksSlice.ts"],"sourcesContent":["// // import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// // interface Task {\r\n// //   id: string;\r\n// //   title: string;\r\n// //   description: string;\r\n// //   status: string;\r\n// // }\r\n\r\n// // interface TasksState {\r\n// //   tasks: Task[];\r\n// // }\r\n\r\n// // const initialState: TasksState = {\r\n// //   tasks: [],\r\n// // };\r\n\r\n// // const tasksSlice = createSlice({\r\n// //   name: 'tasks',\r\n// //   initialState,\r\n// //   reducers: {\r\n// //     setTasks(state, action: PayloadAction<Task[]>) {\r\n// //       state.tasks = action.payload;\r\n// //     },\r\n// //     addTask(state, action: PayloadAction<Task>) {\r\n// //       state.tasks.push(action.payload);\r\n// //     },\r\n// //     updateTask(state, action: PayloadAction<Task>) {\r\n// //       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n// //       if (index !== -1) {\r\n// //         state.tasks[index] = action.payload;\r\n// //       }\r\n// //     },\r\n// //     deleteTask(state, action: PayloadAction<string>) {\r\n// //       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n// //     },\r\n// //   },\r\n// // });\r\n\r\n// // export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\r\n// // export default tasksSlice.reducer;\r\n\r\n// import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import api from '../utils/api';\r\n\r\n// interface Task {\r\n//   id: string;\r\n//   title: string;\r\n//   description: string;\r\n//   status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//   tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//   tasks: [\r\n//     { id: '1', title: 'Görev 1', description: 'İlk görev', status: 'Yapılacak' },\r\n//   // ...\r\n//   ],\r\n// };\r\n\r\n// // Async Thunks\r\n// export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\r\n//   const response = await api.get('/tasks');\r\n//   return response.data;\r\n// });\r\n\r\n// export const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\r\n//   const response = await api.post('/tasks', task);\r\n//   return response.data;\r\n// });\r\n\r\n// export const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\r\n//   const response = await api.put(`/tasks/${task.id}`, task);\r\n//   return response.data;\r\n// });\r\n\r\n// export const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\r\n//   await api.delete(`/tasks/${id}`);\r\n//   return id;\r\n// });\r\n\r\n// const tasksSlice = createSlice({\r\n//   name: 'tasks',\r\n//   initialState,\r\n//   reducers: {},\r\n//   extraReducers: (builder) => {\r\n//     builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//     });\r\n//     builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n//       state.tasks.push(action.payload);\r\n//     });\r\n//     builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//       if (index !== -1) {\r\n//         state.tasks[index] = action.payload;\r\n//       }\r\n//     });\r\n//     builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\r\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//     });\r\n//   },\r\n// });\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\n//  import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n//  import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: []\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n//export default tasksSlice.reducer;\r\n\r\n\r\n// src/redux/tasksSlice.ts\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: []\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n// src/redux/tasksSlice.ts\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: [\r\n//         { id: '1', title: 'Task 1', status: 'To Do' },\r\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\r\n//         { id: '3', title: 'Task 3', status: 'Done' },\r\n//     ],\r\n// };\r\n\r\n// export const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: [\r\n//         { id: '1', title: 'Task 1', status: 'To Do' },\r\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\r\n//         { id: '3', title: 'Task 3', status: 'Done' },\r\n//     ],\r\n// };\r\n\r\n// export const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//   id: string;\r\n//   title: string;\r\n//   status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//   tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//   tasks: [],\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//   name: 'tasks',\r\n//   initialState,\r\n//   reducers: {\r\n//     setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//     },\r\n//     addTask: (state, action: PayloadAction<Task>) => {\r\n//       state.tasks.push(action.payload);\r\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n//     },\r\n//     updateTaskInState: (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n//     },\r\n//     deleteTask: (state, action: PayloadAction<string>) => {\r\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n//     }\r\n//   },\r\n// });\r\n\r\n// export const { setTasks, addTask, updateTaskInState, deleteTask } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//   const tasks = localStorage.getItem('tasks');\r\n//   if (tasks) {\r\n//     dispatch(setTasks(JSON.parse(tasks)));\r\n//   }\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Task } from '../types';\r\nimport { AppThunk } from './store';\r\n\r\ninterface TasksState {\r\n    tasks: Task[];\r\n}\r\n\r\nconst initialState: TasksState = {\r\n    tasks: [],\r\n};\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        setTasks: (state, action: PayloadAction<Task[]>) => {\r\n            state.tasks = action.payload;\r\n        },\r\n        updateTaskInState: (state, action: PayloadAction<Task[]>) => {\r\n            state.tasks = action.payload;\r\n        },\r\n        deleteTaskInState: (state, action: PayloadAction<string>) => {\r\n            state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n        },\r\n        addTaskInState: (state, action: PayloadAction<Task>) => {\r\n            state.tasks.push(action.payload);\r\n        },\r\n    },\r\n});\r\n\r\nexport const { setTasks, updateTaskInState, deleteTaskInState, addTaskInState } = tasksSlice.actions;\r\n\r\nexport const fetchTasks = (): AppThunk => dispatch => {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n    dispatch(setTasks(tasks));\r\n};\r\n\r\nexport const updateTask = (tasks: Task[]): AppThunk => dispatch => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    dispatch(updateTaskInState(tasks));\r\n};\r\n\r\nexport const deleteTask = (taskId: string): AppThunk => dispatch => {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n    const updatedTasks = tasks.filter((task: Task) => task.id !== taskId);\r\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n    dispatch(deleteTaskInState(taskId));\r\n};\r\n\r\nexport const addTask = (task: Task): AppThunk => dispatch => {\r\n    const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n    const updatedTasks = [...tasks, task];\r\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n    dispatch(addTaskInState(task));\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}