{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n//     const boards = useSelector((state: RootState) => state.tasks.boards);\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\n//     const [newBoardTitle, setNewBoardTitle] = useState('');\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = () => {\n//         const newTask = {\n//             id: Math.random().toString(36).substr(2, 9),\n//             title: newTaskTitle,\n//             status: 'To Do'\n//         };\n//         dispatch(addTask(newTask));\n//         setNewTaskTitle('');\n//     };\n\n//     const handleAddBoard = () => {\n//         dispatch(addBoard(newBoardTitle));\n//         setNewBoardTitle('');\n//     };\n\n//     const handleEditTask = (taskId: string) => {\n//         setEditingTaskId(taskId);\n//         const task = tasks.find(task => task.id === taskId);\n//         if (task) {\n//             setEditingTaskTitle(task.title);\n//             setEditingTaskStatus(task.status);\n//         }\n//     };\n\n//     const handleUpdateTask = () => {\n//         const updatedTasks = tasks.map(task => \n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\n//         );\n//         dispatch(updateTaskInState(updatedTasks));\n//         setEditingTaskId(null);\n//         setEditingTaskTitle('');\n//         setEditingTaskStatus('To Do');\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTaskTitle}\n//                 onChange={(e) => setNewTaskTitle(e.target.value)}\n//                 placeholder=\"Yeni görev ekle...\"\n//             />\n//             <button onClick={handleAddTask}>Ekle</button>\n\n//             <input\n//                 type=\"text\"\n//                 value={newBoardTitle}\n//                 onChange={(e) => setNewBoardTitle(e.target.value)}\n//                 placeholder=\"Yeni pano ekle...\"\n//             />\n//             <button onClick={handleAddBoard}>Pano Ekle</button>\n\n//             <DragDropContext onDragEnd={handleDragEnd}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                     {boards.map((board, index) => (\n//                         <Droppable droppableId={board} key={index}>\n//                             {(provided) => (\n//                                 <div\n//                                     {...provided.droppableProps}\n//                                     ref={provided.innerRef}\n//                                     style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                                 >\n//                                     <h2>{board}</h2>\n//                                     {tasks\n//                                         .filter(task => task.status === board)\n//                                         .map((task, index) => (\n//                                             <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                                 {(provided) => (\n//                                                     <div\n//                                                         ref={provided.innerRef}\n//                                                         {...provided.draggableProps}\n//                                                         {...provided.dragHandleProps}\n//                                                         style={{\n//                                                             marginBottom: '8px',\n//                                                             padding: '16px',\n//                                                             backgroundColor: 'white',\n//                                                             borderRadius: '4px',\n//                                                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                             ...provided.draggableProps.style\n//                                                         }}\n//                                                     >\n//                                                         {editingTaskId === task.id ? (\n//                                                             <div>\n//                                                                 <input\n//                                                                     type=\"text\"\n//                                                                     value={editingTaskTitle}\n//                                                                     onChange={(e) => setEditingTaskTitle(e.target.value)}\n//                                                                 />\n//                                                                 <select\n//                                                                     value={editingTaskStatus}\n//                                                                     onChange={(e) => setEditingTaskStatus(e.target.value)}\n//                                                                 >\n//                                                                     {boards.map((board) => (\n//                                                                         <option key={board} value={board}>\n//                                                                             {board}\n//                                                                         </option>\n//                                                                     ))}\n//                                                                 </select>\n//                                                                 <button onClick={handleUpdateTask}>Güncelle</button>\n//                                                             </div>\n//                                                         ) : (\n//                                                             <div>\n//                                                                 {task.title}\n//                                                                 <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\n//                                                                 <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                             </div>\n//                                                         )}\n//                                                     </div>\n//                                                 )}\n//                                             </Draggable>\n//                                         ))}\n//                                     {provided.placeholder}\n//                                 </div>\n//                             )}\n//                         </Droppable>\n//                     ))}\n//                 </div>\n//             </DragDropContext>\n//         </div>\n//     );\n// };\n\n// export default KanbanBoard;\n\nimport React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { moveTask } from '../redux/tasksSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const boards = useSelector(state => state.tasks.boards);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n    dispatch(moveTask({\n      taskId: draggableId,\n      sourceBoardId: source.droppableId,\n      destinationBoardId: destination.droppableId,\n      destinationIndex: destination.index\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-container\",\n      children: boards.map(board => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: board.id,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          className: \"kanban-board\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: board.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this), board.tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              className: \"kanban-task\",\n              children: task.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 45\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 37\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this)\n      }, board.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"J0gPoHHtlgq3Z9wUf7/9gMQhGGc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","DragDropContext","Droppable","Draggable","useDispatch","useSelector","moveTask","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","boards","state","tasks","onDragEnd","result","destination","source","draggableId","droppableId","index","taskId","sourceBoardId","destinationBoardId","destinationIndex","children","className","map","board","id","provided","ref","innerRef","droppableProps","title","fileName","_jsxFileName","lineNumber","columnNumber","task","draggableProps","dragHandleProps","content","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n//     const boards = useSelector((state: RootState) => state.tasks.boards);\r\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\r\n//     const [newBoardTitle, setNewBoardTitle] = useState('');\r\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = () => {\r\n//         const newTask = {\r\n//             id: Math.random().toString(36).substr(2, 9),\r\n//             title: newTaskTitle,\r\n//             status: 'To Do'\r\n//         };\r\n//         dispatch(addTask(newTask));\r\n//         setNewTaskTitle('');\r\n//     };\r\n\r\n//     const handleAddBoard = () => {\r\n//         dispatch(addBoard(newBoardTitle));\r\n//         setNewBoardTitle('');\r\n//     };\r\n\r\n//     const handleEditTask = (taskId: string) => {\r\n//         setEditingTaskId(taskId);\r\n//         const task = tasks.find(task => task.id === taskId);\r\n//         if (task) {\r\n//             setEditingTaskTitle(task.title);\r\n//             setEditingTaskStatus(task.status);\r\n//         }\r\n//     };\r\n\r\n//     const handleUpdateTask = () => {\r\n//         const updatedTasks = tasks.map(task => \r\n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\r\n//         );\r\n//         dispatch(updateTaskInState(updatedTasks));\r\n//         setEditingTaskId(null);\r\n//         setEditingTaskTitle('');\r\n//         setEditingTaskStatus('To Do');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={newTaskTitle}\r\n//                 onChange={(e) => setNewTaskTitle(e.target.value)}\r\n//                 placeholder=\"Yeni görev ekle...\"\r\n//             />\r\n//             <button onClick={handleAddTask}>Ekle</button>\r\n\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={newBoardTitle}\r\n//                 onChange={(e) => setNewBoardTitle(e.target.value)}\r\n//                 placeholder=\"Yeni pano ekle...\"\r\n//             />\r\n//             <button onClick={handleAddBoard}>Pano Ekle</button>\r\n\r\n//             <DragDropContext onDragEnd={handleDragEnd}>\r\n//                 <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                     {boards.map((board, index) => (\r\n//                         <Droppable droppableId={board} key={index}>\r\n//                             {(provided) => (\r\n//                                 <div\r\n//                                     {...provided.droppableProps}\r\n//                                     ref={provided.innerRef}\r\n//                                     style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                                 >\r\n//                                     <h2>{board}</h2>\r\n//                                     {tasks\r\n//                                         .filter(task => task.status === board)\r\n//                                         .map((task, index) => (\r\n//                                             <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                                 {(provided) => (\r\n//                                                     <div\r\n//                                                         ref={provided.innerRef}\r\n//                                                         {...provided.draggableProps}\r\n//                                                         {...provided.dragHandleProps}\r\n//                                                         style={{\r\n//                                                             marginBottom: '8px',\r\n//                                                             padding: '16px',\r\n//                                                             backgroundColor: 'white',\r\n//                                                             borderRadius: '4px',\r\n//                                                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                             ...provided.draggableProps.style\r\n//                                                         }}\r\n//                                                     >\r\n//                                                         {editingTaskId === task.id ? (\r\n//                                                             <div>\r\n//                                                                 <input\r\n//                                                                     type=\"text\"\r\n//                                                                     value={editingTaskTitle}\r\n//                                                                     onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n//                                                                 />\r\n//                                                                 <select\r\n//                                                                     value={editingTaskStatus}\r\n//                                                                     onChange={(e) => setEditingTaskStatus(e.target.value)}\r\n//                                                                 >\r\n//                                                                     {boards.map((board) => (\r\n//                                                                         <option key={board} value={board}>\r\n//                                                                             {board}\r\n//                                                                         </option>\r\n//                                                                     ))}\r\n//                                                                 </select>\r\n//                                                                 <button onClick={handleUpdateTask}>Güncelle</button>\r\n//                                                             </div>\r\n//                                                         ) : (\r\n//                                                             <div>\r\n//                                                                 {task.title}\r\n//                                                                 <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n//                                                                 <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                             </div>\r\n//                                                         )}\r\n//                                                     </div>\r\n//                                                 )}\r\n//                                             </Draggable>\r\n//                                         ))}\r\n//                                     {provided.placeholder}\r\n//                                 </div>\r\n//                             )}\r\n//                         </Droppable>\r\n//                     ))}\r\n//                 </div>\r\n//             </DragDropContext>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n\r\nimport React from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../redux/store';\r\nimport { moveTask } from '../redux/tasksSlice';\r\n\r\nconst KanbanBoard = () => {\r\n    const dispatch = useDispatch();\r\n    const boards = useSelector((state: RootState) => state.tasks.boards);\r\n\r\n    const onDragEnd = (result: any) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        dispatch(moveTask({\r\n            taskId: draggableId,\r\n            sourceBoardId: source.droppableId,\r\n            destinationBoardId: destination.droppableId,\r\n            destinationIndex: destination.index,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"kanban-container\">\r\n                {boards.map((board) => (\r\n                    <Droppable key={board.id} droppableId={board.id}>\r\n                        {(provided) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                                className=\"kanban-board\"\r\n                            >\r\n                                <h3>{board.title}</h3>\r\n                                {board.tasks.map((task, index) => (\r\n                                    <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                        {(provided) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                className=\"kanban-task\"\r\n                                            >\r\n                                                {task.content}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,MAAM,GAAGP,WAAW,CAAEQ,KAAgB,IAAKA,KAAK,CAACC,KAAK,CAACF,MAAM,CAAC;EAEpE,MAAMG,SAAS,GAAIC,MAAW,IAAK;IAC/B,MAAM;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAY,CAAC,GAAGH,MAAM;IAEnD,IAAI,CAACC,WAAW,EAAE;IAClB,IAAIA,WAAW,CAACG,WAAW,KAAKF,MAAM,CAACE,WAAW,IAAIH,WAAW,CAACI,KAAK,KAAKH,MAAM,CAACG,KAAK,EAAE;IAE1FV,QAAQ,CAACL,QAAQ,CAAC;MACdgB,MAAM,EAAEH,WAAW;MACnBI,aAAa,EAAEL,MAAM,CAACE,WAAW;MACjCI,kBAAkB,EAAEP,WAAW,CAACG,WAAW;MAC3CK,gBAAgB,EAAER,WAAW,CAACI;IAClC,CAAC,CAAC,CAAC;EACP,CAAC;EAED,oBACIb,OAAA,CAACP,eAAe;IAACc,SAAS,EAAEA,SAAU;IAAAW,QAAA,eAClClB,OAAA;MAAKmB,SAAS,EAAC,kBAAkB;MAAAD,QAAA,EAC5Bd,MAAM,CAACgB,GAAG,CAAEC,KAAK,iBACdrB,OAAA,CAACN,SAAS;QAAgBkB,WAAW,EAAES,KAAK,CAACC,EAAG;QAAAJ,QAAA,EAC1CK,QAAQ,iBACNvB,OAAA;UACIwB,GAAG,EAAED,QAAQ,CAACE,QAAS;UAAA,GACnBF,QAAQ,CAACG,cAAc;UAC3BP,SAAS,EAAC,cAAc;UAAAD,QAAA,gBAExBlB,OAAA;YAAAkB,QAAA,EAAKG,KAAK,CAACM;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EACrBV,KAAK,CAACf,KAAK,CAACc,GAAG,CAAC,CAACY,IAAI,EAAEnB,KAAK,kBACzBb,OAAA,CAACL,SAAS;YAAegB,WAAW,EAAEqB,IAAI,CAACV,EAAG;YAACT,KAAK,EAAEA,KAAM;YAAAK,QAAA,EACtDK,QAAQ,iBACNvB,OAAA;cACIwB,GAAG,EAAED,QAAQ,CAACE,QAAS;cAAA,GACnBF,QAAQ,CAACU,cAAc;cAAA,GACvBV,QAAQ,CAACW,eAAe;cAC5Bf,SAAS,EAAC,aAAa;cAAAD,QAAA,EAEtBc,IAAI,CAACG;YAAO;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ;UACR,GAVWC,IAAI,CAACV,EAAE;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWZ,CACd,CAAC,EACDR,QAAQ,CAACa,WAAW;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MACR,GAxBWV,KAAK,CAACC,EAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAyBb,CACd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAE1B,CAAC;AAAC7B,EAAA,CApDID,WAAW;EAAA,QACIL,WAAW,EACbC,WAAW;AAAA;AAAAwC,EAAA,GAFxBpC,WAAW;AAsDjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}