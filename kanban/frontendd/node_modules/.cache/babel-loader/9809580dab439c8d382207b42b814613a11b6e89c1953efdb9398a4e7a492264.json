{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n//     const boards = useSelector((state: RootState) => state.tasks.boards);\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\n//     const [newBoardTitle, setNewBoardTitle] = useState('');\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = () => {\n//         const newTask = {\n//             id: Math.random().toString(36).substr(2, 9),\n//             title: newTaskTitle,\n//             status: 'To Do'\n//         };\n//         dispatch(addTask(newTask));\n//         setNewTaskTitle('');\n//     };\n\n//     const handleAddBoard = () => {\n//         dispatch(addBoard(newBoardTitle));\n//         setNewBoardTitle('');\n//     };\n\n//     const handleEditTask = (taskId: string) => {\n//         setEditingTaskId(taskId);\n//         const task = tasks.find(task => task.id === taskId);\n//         if (task) {\n//             setEditingTaskTitle(task.title);\n//             setEditingTaskStatus(task.status);\n//         }\n//     };\n\n//     const handleUpdateTask = () => {\n//         const updatedTasks = tasks.map(task => \n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\n//         );\n//         dispatch(updateTaskInState(updatedTasks));\n//         setEditingTaskId(null);\n//         setEditingTaskTitle('');\n//         setEditingTaskStatus('To Do');\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTaskTitle}\n//                 onChange={(e) => setNewTaskTitle(e.target.value)}\n//                 placeholder=\"Yeni görev ekle...\"\n//             />\n//             <button onClick={handleAddTask}>Ekle</button>\n\n//             <input\n//                 type=\"text\"\n//                 value={newBoardTitle}\n//                 onChange={(e) => setNewBoardTitle(e.target.value)}\n//                 placeholder=\"Yeni pano ekle...\"\n//             />\n//             <button onClick={handleAddBoard}>Pano Ekle</button>\n\n//             <DragDropContext onDragEnd={handleDragEnd}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                     {boards.map((board, index) => (\n//                         <Droppable droppableId={board} key={index}>\n//                             {(provided) => (\n//                                 <div\n//                                     {...provided.droppableProps}\n//                                     ref={provided.innerRef}\n//                                     style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                                 >\n//                                     <h2>{board}</h2>\n//                                     {tasks\n//                                         .filter(task => task.status === board)\n//                                         .map((task, index) => (\n//                                             <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                                 {(provided) => (\n//                                                     <div\n//                                                         ref={provided.innerRef}\n//                                                         {...provided.draggableProps}\n//                                                         {...provided.dragHandleProps}\n//                                                         style={{\n//                                                             marginBottom: '8px',\n//                                                             padding: '16px',\n//                                                             backgroundColor: 'white',\n//                                                             borderRadius: '4px',\n//                                                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                             ...provided.draggableProps.style\n//                                                         }}\n//                                                     >\n//                                                         {editingTaskId === task.id ? (\n//                                                             <div>\n//                                                                 <input\n//                                                                     type=\"text\"\n//                                                                     value={editingTaskTitle}\n//                                                                     onChange={(e) => setEditingTaskTitle(e.target.value)}\n//                                                                 />\n//                                                                 <select\n//                                                                     value={editingTaskStatus}\n//                                                                     onChange={(e) => setEditingTaskStatus(e.target.value)}\n//                                                                 >\n//                                                                     {boards.map((board) => (\n//                                                                         <option key={board} value={board}>\n//                                                                             {board}\n//                                                                         </option>\n//                                                                     ))}\n//                                                                 </select>\n//                                                                 <button onClick={handleUpdateTask}>Güncelle</button>\n//                                                             </div>\n//                                                         ) : (\n//                                                             <div>\n//                                                                 {task.title}\n//                                                                 <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\n//                                                                 <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                             </div>\n//                                                         )}\n//                                                     </div>\n//                                                 )}\n//                                             </Draggable>\n//                                         ))}\n//                                     {provided.placeholder}\n//                                 </div>\n//                             )}\n//                         </Droppable>\n//                     ))}\n//                 </div>\n//             </DragDropContext>\n//         </div>\n//     );\n// };\n\n// export default KanbanBoard;\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks.tasks);\n  const boards = useSelector(state => state.tasks.boards);\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [newBoardTitle, setNewBoardTitle] = useState('');\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [editingTaskTitle, setEditingTaskTitle] = useState('');\n  const [editingTaskStatus, setEditingTaskStatus] = useState('To Do');\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  const handleDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // Hedef boşsa işlem yapma\n    if (!destination) return;\n\n    // Aynı konuma sürükleniyorsa işlem yapma\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Sürüklenen görevi bul\n    const movedTask = tasks.find(task => task.id === draggableId);\n    if (movedTask) {\n      // Görevin yeni durumunu güncelle\n      const updatedTask = {\n        ...movedTask,\n        status: destination.droppableId\n      };\n      const updatedTasks = [...tasks];\n      updatedTasks.splice(source.index, 1); // Görev eski konumundan kaldır\n      updatedTasks.splice(destination.index, 0, updatedTask); // Görevi yeni konuma ekle\n\n      // Redux durumunu güncelle\n      dispatch(updateTaskInState(updatedTasks));\n    }\n  };\n  const handleDeleteTask = taskId => {\n    dispatch(deleteTask(taskId));\n  };\n  const handleAddTask = e => {\n    e.preventDefault(); // Sayfa yenilenmesini önle\n    if (newTaskTitle.trim() === '') return; // Boş görev eklenmesini engelle\n\n    const newTask = {\n      id: Math.random().toString(36).substr(2, 9),\n      title: newTaskTitle,\n      status: 'To Do'\n    };\n    dispatch(addTask(newTask));\n    setNewTaskTitle('');\n  };\n  const handleAddBoard = e => {\n    e.preventDefault(); // Sayfa yenilenmesini önle\n    if (newBoardTitle.trim() === '') return; // Boş pano eklenmesini engelle\n\n    dispatch(addBoard(newBoardTitle));\n    setNewBoardTitle('');\n  };\n  const handleEditTask = taskId => {\n    setEditingTaskId(taskId);\n    const task = tasks.find(task => task.id === taskId);\n    if (task) {\n      setEditingTaskTitle(task.title);\n      setEditingTaskStatus(task.status);\n    }\n  };\n  const handleUpdateTask = e => {\n    e.preventDefault(); // Sayfa yenilenmesini önle\n    if (editingTaskId) {\n      const updatedTasks = tasks.map(task => task.id === editingTaskId ? {\n        ...task,\n        title: editingTaskTitle,\n        status: editingTaskStatus\n      } : task);\n      dispatch(updateTaskInState(updatedTasks));\n      setEditingTaskId(null);\n      setEditingTaskTitle('');\n      setEditingTaskStatus('To Do');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddTask,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTaskTitle,\n        onChange: e => setNewTaskTitle(e.target.value),\n        placeholder: \"Yeni g\\xF6rev ekle...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Ekle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddBoard,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newBoardTitle,\n        onChange: e => setNewBoardTitle(e.target.value),\n        placeholder: \"Yeni pano ekle...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Pano Ekle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: handleDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between'\n        },\n        children: boards.map((board, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: board,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ...provided.droppableProps,\n            ref: provided.innerRef,\n            style: {\n              margin: '0 10px',\n              padding: '10px',\n              width: '30%',\n              backgroundColor: '#f8f8f8',\n              borderRadius: '4px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: board\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 37\n            }, this), tasks.filter(task => task.status === board).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n              draggableId: task.id,\n              index: index,\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                style: {\n                  marginBottom: '8px',\n                  padding: '16px',\n                  backgroundColor: 'white',\n                  borderRadius: '4px',\n                  boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n                  ...provided.draggableProps.style\n                },\n                children: editingTaskId === task.id ? /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: handleUpdateTask,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    value: editingTaskTitle,\n                    onChange: e => setEditingTaskTitle(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 65\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    value: editingTaskStatus,\n                    onChange: e => setEditingTaskStatus(e.target.value),\n                    children: boards.map(board => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: board,\n                      children: board\n                    }, board, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 316,\n                      columnNumber: 73\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 65\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    children: \"G\\xFCncelle\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 61\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [task.title, /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleEditTask(task.id),\n                    children: \"D\\xFCzenle\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 65\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleDeleteTask(task.id),\n                    children: \"Sil\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 65\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 61\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 53\n              }, this)\n            }, task.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 45\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"vC9GAuap1DC1ahhYmK8txafQo0U=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchTasks","updateTaskInState","deleteTask","addTask","addBoard","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","tasks","state","boards","newTaskTitle","setNewTaskTitle","newBoardTitle","setNewBoardTitle","editingTaskId","setEditingTaskId","editingTaskTitle","setEditingTaskTitle","editingTaskStatus","setEditingTaskStatus","handleDragEnd","result","destination","source","draggableId","droppableId","index","movedTask","find","task","id","updatedTask","status","updatedTasks","splice","handleDeleteTask","taskId","handleAddTask","e","preventDefault","trim","newTask","Math","random","toString","substr","title","handleAddBoard","handleEditTask","handleUpdateTask","map","children","onSubmit","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onDragEnd","style","display","justifyContent","board","provided","droppableProps","ref","innerRef","margin","padding","width","backgroundColor","borderRadius","filter","draggableProps","dragHandleProps","marginBottom","boxShadow","onClick","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n//     const boards = useSelector((state: RootState) => state.tasks.boards);\r\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\r\n//     const [newBoardTitle, setNewBoardTitle] = useState('');\r\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = () => {\r\n//         const newTask = {\r\n//             id: Math.random().toString(36).substr(2, 9),\r\n//             title: newTaskTitle,\r\n//             status: 'To Do'\r\n//         };\r\n//         dispatch(addTask(newTask));\r\n//         setNewTaskTitle('');\r\n//     };\r\n\r\n//     const handleAddBoard = () => {\r\n//         dispatch(addBoard(newBoardTitle));\r\n//         setNewBoardTitle('');\r\n//     };\r\n\r\n//     const handleEditTask = (taskId: string) => {\r\n//         setEditingTaskId(taskId);\r\n//         const task = tasks.find(task => task.id === taskId);\r\n//         if (task) {\r\n//             setEditingTaskTitle(task.title);\r\n//             setEditingTaskStatus(task.status);\r\n//         }\r\n//     };\r\n\r\n//     const handleUpdateTask = () => {\r\n//         const updatedTasks = tasks.map(task => \r\n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\r\n//         );\r\n//         dispatch(updateTaskInState(updatedTasks));\r\n//         setEditingTaskId(null);\r\n//         setEditingTaskTitle('');\r\n//         setEditingTaskStatus('To Do');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={newTaskTitle}\r\n//                 onChange={(e) => setNewTaskTitle(e.target.value)}\r\n//                 placeholder=\"Yeni görev ekle...\"\r\n//             />\r\n//             <button onClick={handleAddTask}>Ekle</button>\r\n\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={newBoardTitle}\r\n//                 onChange={(e) => setNewBoardTitle(e.target.value)}\r\n//                 placeholder=\"Yeni pano ekle...\"\r\n//             />\r\n//             <button onClick={handleAddBoard}>Pano Ekle</button>\r\n\r\n//             <DragDropContext onDragEnd={handleDragEnd}>\r\n//                 <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                     {boards.map((board, index) => (\r\n//                         <Droppable droppableId={board} key={index}>\r\n//                             {(provided) => (\r\n//                                 <div\r\n//                                     {...provided.droppableProps}\r\n//                                     ref={provided.innerRef}\r\n//                                     style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                                 >\r\n//                                     <h2>{board}</h2>\r\n//                                     {tasks\r\n//                                         .filter(task => task.status === board)\r\n//                                         .map((task, index) => (\r\n//                                             <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                                 {(provided) => (\r\n//                                                     <div\r\n//                                                         ref={provided.innerRef}\r\n//                                                         {...provided.draggableProps}\r\n//                                                         {...provided.dragHandleProps}\r\n//                                                         style={{\r\n//                                                             marginBottom: '8px',\r\n//                                                             padding: '16px',\r\n//                                                             backgroundColor: 'white',\r\n//                                                             borderRadius: '4px',\r\n//                                                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                             ...provided.draggableProps.style\r\n//                                                         }}\r\n//                                                     >\r\n//                                                         {editingTaskId === task.id ? (\r\n//                                                             <div>\r\n//                                                                 <input\r\n//                                                                     type=\"text\"\r\n//                                                                     value={editingTaskTitle}\r\n//                                                                     onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n//                                                                 />\r\n//                                                                 <select\r\n//                                                                     value={editingTaskStatus}\r\n//                                                                     onChange={(e) => setEditingTaskStatus(e.target.value)}\r\n//                                                                 >\r\n//                                                                     {boards.map((board) => (\r\n//                                                                         <option key={board} value={board}>\r\n//                                                                             {board}\r\n//                                                                         </option>\r\n//                                                                     ))}\r\n//                                                                 </select>\r\n//                                                                 <button onClick={handleUpdateTask}>Güncelle</button>\r\n//                                                             </div>\r\n//                                                         ) : (\r\n//                                                             <div>\r\n//                                                                 {task.title}\r\n//                                                                 <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n//                                                                 <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                             </div>\r\n//                                                         )}\r\n//                                                     </div>\r\n//                                                 )}\r\n//                                             </Draggable>\r\n//                                         ))}\r\n//                                     {provided.placeholder}\r\n//                                 </div>\r\n//                             )}\r\n//                         </Droppable>\r\n//                     ))}\r\n//                 </div>\r\n//             </DragDropContext>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\r\nimport { RootState, AppDispatch } from '../redux/store';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n    const boards = useSelector((state: RootState) => state.tasks.boards);\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [newBoardTitle, setNewBoardTitle] = useState('');\r\n    const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n    const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n    const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks());\r\n    }, [dispatch]);\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        const { destination, source, draggableId } = result;\r\n\r\n        // Hedef boşsa işlem yapma\r\n        if (!destination) return;\r\n\r\n        // Aynı konuma sürükleniyorsa işlem yapma\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        // Sürüklenen görevi bul\r\n        const movedTask = tasks.find(task => task.id === draggableId);\r\n        if (movedTask) {\r\n            // Görevin yeni durumunu güncelle\r\n            const updatedTask = { ...movedTask, status: destination.droppableId };\r\n\r\n            const updatedTasks = [...tasks];\r\n            updatedTasks.splice(source.index, 1); // Görev eski konumundan kaldır\r\n            updatedTasks.splice(destination.index, 0, updatedTask); // Görevi yeni konuma ekle\r\n\r\n            // Redux durumunu güncelle\r\n            dispatch(updateTaskInState(updatedTasks));\r\n        }\r\n    };\r\n\r\n    const handleDeleteTask = (taskId: string) => {\r\n        dispatch(deleteTask(taskId));\r\n    };\r\n\r\n    const handleAddTask = (e: React.FormEvent) => {\r\n        e.preventDefault(); // Sayfa yenilenmesini önle\r\n        if (newTaskTitle.trim() === '') return; // Boş görev eklenmesini engelle\r\n\r\n        const newTask = {\r\n            id: Math.random().toString(36).substr(2, 9),\r\n            title: newTaskTitle,\r\n            status: 'To Do'\r\n        };\r\n        dispatch(addTask(newTask));\r\n        setNewTaskTitle('');\r\n    };\r\n\r\n    const handleAddBoard = (e: React.FormEvent) => {\r\n        e.preventDefault(); // Sayfa yenilenmesini önle\r\n        if (newBoardTitle.trim() === '') return; // Boş pano eklenmesini engelle\r\n\r\n        dispatch(addBoard(newBoardTitle));\r\n        setNewBoardTitle('');\r\n    };\r\n\r\n    const handleEditTask = (taskId: string) => {\r\n        setEditingTaskId(taskId);\r\n        const task = tasks.find(task => task.id === taskId);\r\n        if (task) {\r\n            setEditingTaskTitle(task.title);\r\n            setEditingTaskStatus(task.status);\r\n        }\r\n    };\r\n\r\n    const handleUpdateTask = (e: React.FormEvent) => {\r\n        e.preventDefault(); // Sayfa yenilenmesini önle\r\n        if (editingTaskId) {\r\n            const updatedTasks = tasks.map(task => \r\n                task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\r\n            );\r\n            dispatch(updateTaskInState(updatedTasks));\r\n            setEditingTaskId(null);\r\n            setEditingTaskTitle('');\r\n            setEditingTaskStatus('To Do');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleAddTask}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newTaskTitle}\r\n                    onChange={(e) => setNewTaskTitle(e.target.value)}\r\n                    placeholder=\"Yeni görev ekle...\"\r\n                />\r\n                <button type=\"submit\">Ekle</button>\r\n            </form>\r\n\r\n            <form onSubmit={handleAddBoard}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newBoardTitle}\r\n                    onChange={(e) => setNewBoardTitle(e.target.value)}\r\n                    placeholder=\"Yeni pano ekle...\"\r\n                />\r\n                <button type=\"submit\">Pano Ekle</button>\r\n            </form>\r\n\r\n            <DragDropContext onDragEnd={handleDragEnd}>\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    {boards.map((board, index) => (\r\n                        <Droppable droppableId={board} key={index}>\r\n                            {(provided) => (\r\n                                <div\r\n                                    {...provided.droppableProps}\r\n                                    ref={provided.innerRef}\r\n                                    style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n                                >\r\n                                    <h2>{board}</h2>\r\n                                    {tasks\r\n                                        .filter(task => task.status === board)\r\n                                        .map((task, index) => (\r\n                                            <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                                {(provided) => (\r\n                                                    <div\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                        style={{\r\n                                                            marginBottom: '8px',\r\n                                                            padding: '16px',\r\n                                                            backgroundColor: 'white',\r\n                                                            borderRadius: '4px',\r\n                                                            boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n                                                            ...provided.draggableProps.style\r\n                                                        }}\r\n                                                    >\r\n                                                        {editingTaskId === task.id ? (\r\n                                                            <form onSubmit={handleUpdateTask}>\r\n                                                                <input\r\n                                                                    type=\"text\"\r\n                                                                    value={editingTaskTitle}\r\n                                                                    onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n                                                                />\r\n                                                                <select\r\n                                                                    value={editingTaskStatus}\r\n                                                                    onChange={(e) => setEditingTaskStatus(e.target.value)}\r\n                                                                >\r\n                                                                    {boards.map((board) => (\r\n                                                                        <option key={board} value={board}>\r\n                                                                            {board}\r\n                                                                        </option>\r\n                                                                    ))}\r\n                                                                </select>\r\n                                                                <button type=\"submit\">Güncelle</button>\r\n                                                            </form>\r\n                                                        ) : (\r\n                                                            <div>\r\n                                                                {task.title}\r\n                                                                <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n                                                                <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    ))}\r\n                </div>\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,qBAAqB;AAElG,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAoB,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExF,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGd,WAAW,CAAc,CAAC;EAC3C,MAAMe,KAAK,GAAGd,WAAW,CAAEe,KAAgB,IAAKA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAClE,MAAME,MAAM,GAAGhB,WAAW,CAAEe,KAAgB,IAAKA,KAAK,CAACD,KAAK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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}