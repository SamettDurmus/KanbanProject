{"ast":null,"code":"// // import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// // interface Task {\n// //   id: string;\n// //   title: string;\n// //   description: string;\n// //   status: string;\n// // }\n\n// // interface TasksState {\n// //   tasks: Task[];\n// // }\n\n// // const initialState: TasksState = {\n// //   tasks: [],\n// // };\n\n// // const tasksSlice = createSlice({\n// //   name: 'tasks',\n// //   initialState,\n// //   reducers: {\n// //     setTasks(state, action: PayloadAction<Task[]>) {\n// //       state.tasks = action.payload;\n// //     },\n// //     addTask(state, action: PayloadAction<Task>) {\n// //       state.tasks.push(action.payload);\n// //     },\n// //     updateTask(state, action: PayloadAction<Task>) {\n// //       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n// //       if (index !== -1) {\n// //         state.tasks[index] = action.payload;\n// //       }\n// //     },\n// //     deleteTask(state, action: PayloadAction<string>) {\n// //       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n// //     },\n// //   },\n// // });\n\n// // export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\n// // export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\n// import api from '../utils/api';\n\n// interface Task {\n//   id: string;\n//   title: string;\n//   description: string;\n//   status: string;\n// }\n\n// interface TasksState {\n//   tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//   tasks: [\n//     { id: '1', title: 'Görev 1', description: 'İlk görev', status: 'Yapılacak' },\n//   // ...\n//   ],\n// };\n\n// // Async Thunks\n// export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\n//   const response = await api.get('/tasks');\n//   return response.data;\n// });\n\n// export const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\n//   const response = await api.post('/tasks', task);\n//   return response.data;\n// });\n\n// export const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\n//   const response = await api.put(`/tasks/${task.id}`, task);\n//   return response.data;\n// });\n\n// export const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\n//   await api.delete(`/tasks/${id}`);\n//   return id;\n// });\n\n// const tasksSlice = createSlice({\n//   name: 'tasks',\n//   initialState,\n//   reducers: {},\n//   extraReducers: (builder) => {\n//     builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//     });\n//     builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\n//       state.tasks.push(action.payload);\n//     });\n//     builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//       if (index !== -1) {\n//         state.tasks[index] = action.payload;\n//       }\n//     });\n//     builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//     });\n//   },\n// });\n\n// export default tasksSlice.reducer;\n\n//  import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n//  import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: []\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         }\n//     }\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n//export default tasksSlice.reducer;\n\n// src/redux/tasksSlice.ts\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: []\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         }\n//     }\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// src/redux/tasksSlice.ts\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: [\n//         { id: '1', title: 'Task 1', status: 'To Do' },\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\n//         { id: '3', title: 'Task 3', status: 'Done' },\n//     ],\n// };\n\n// export const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         },\n//     },\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//     id: string;\n//     title: string;\n//     status: string;\n// }\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: [\n//         { id: '1', title: 'Task 1', status: 'To Do' },\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\n//         { id: '3', title: 'Task 3', status: 'Done' },\n//     ],\n// };\n\n// export const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//             if (index !== -1) {\n//                 state.tasks[index] = action.payload;\n//             }\n//         },\n//     },\n// });\n\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(updateTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { AppThunk } from './store';\n\n// interface Task {\n//   id: string;\n//   title: string;\n//   status: string;\n// }\n\n// interface TasksState {\n//   tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//   tasks: [\n//             { id: '4', title: 'Task 4', status: 'To Do' },\n//              { id: '2', title: 'Task 2', status: 'In Progress' },\n//             { id: '3', title: 'Task 3', status: 'Done' },],\n// };\n\n// const tasksSlice = createSlice({\n//   name: 'tasks',\n//   initialState,\n//   reducers: {\n//     setTasks: (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//     },\n//     addTask: (state, action: PayloadAction<Task>) => {\n//       state.tasks.push(action.payload);\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\n//     },\n//     updateTaskInState: (state, action: PayloadAction<Task[]>) => {\n//       state.tasks = action.payload;\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\n//     },\n//     deleteTask: (state, action: PayloadAction<string>) => {\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\n//     }\n//   },\n// });\n\n// export const { setTasks, addTask, updateTaskInState, deleteTask } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//   const tasks = localStorage.getItem('tasks');\n//   if (tasks) {\n//     dispatch(setTasks(JSON.parse(tasks)));\n//   }\n// };\n\n// export default tasksSlice.reducer;\n\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  boards: [{\n    id: '1',\n    name: 'Pano 1',\n    tasks: []\n  }, {\n    id: '2',\n    name: 'Pano 2',\n    tasks: []\n  }]\n};\nconst boardsSlice = createSlice({\n  name: 'boards',\n  initialState,\n  reducers: {\n    setBoards: (state, action) => {\n      state.boards = action.payload;\n      localStorage.setItem('boards', JSON.stringify(state.boards));\n    },\n    addBoard: (state, action) => {\n      state.boards.push(action.payload);\n      localStorage.setItem('boards', JSON.stringify(state.boards));\n    },\n    updateBoard: (state, action) => {\n      state.boards = state.boards.map(board => board.id === action.payload.id ? action.payload : board);\n      localStorage.setItem('boards', JSON.stringify(state.boards));\n    },\n    deleteBoard: (state, action) => {\n      state.boards = state.boards.filter(board => board.id !== action.payload);\n      localStorage.setItem('boards', JSON.stringify(state.boards));\n    },\n    addTaskToBoard: (state, action) => {\n      const {\n        boardId,\n        task\n      } = action.payload;\n      const board = state.boards.find(board => board.id === boardId);\n      if (board) {\n        board.tasks.push(task);\n        localStorage.setItem('boards', JSON.stringify(state.boards));\n      }\n    },\n    updateTaskInBoard: (state, action) => {\n      const {\n        boardId,\n        task\n      } = action.payload;\n      const board = state.boards.find(board => board.id === boardId);\n      if (board) {\n        board.tasks = board.tasks.map(t => t.id === task.id ? task : t);\n        localStorage.setItem('boards', JSON.stringify(state.boards));\n      }\n    },\n    deleteTaskFromBoard: (state, action) => {\n      const {\n        boardId,\n        taskId\n      } = action.payload;\n      const board = state.boards.find(board => board.id === boardId);\n      if (board) {\n        board.tasks = board.tasks.filter(task => task.id !== taskId);\n        localStorage.setItem('boards', JSON.stringify(state.boards));\n      }\n    }\n  }\n});\nexport const {\n  setBoards,\n  addBoard,\n  updateBoard,\n  deleteBoard,\n  addTaskToBoard,\n  updateTaskInBoard,\n  deleteTaskFromBoard\n} = boardsSlice.actions;\nexport const fetchBoards = () => dispatch => {\n  const boards = localStorage.getItem('boards');\n  if (boards) {\n    dispatch(setBoards(JSON.parse(boards)));\n  }\n};\nexport default boardsSlice.reducer;\n\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n// import { Task } from '../types';\n// import { AppThunk } from './store';\n\n// interface TasksState {\n//     tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//     tasks: [],\n// };\n\n// const tasksSlice = createSlice({\n//     name: 'tasks',\n//     initialState,\n//     reducers: {\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         updateTaskInState: (state, action: PayloadAction<Task[]>) => {\n//             state.tasks = action.payload;\n//         },\n//         deleteTaskInState: (state, action: PayloadAction<string>) => {\n//             state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//         },\n//         addTaskInState: (state, action: PayloadAction<Task>) => {\n//             state.tasks.push(action.payload);\n//         },\n//     },\n// });\n\n// export const { setTasks, updateTaskInState, deleteTaskInState, addTaskInState } = tasksSlice.actions;\n\n// export const fetchTasks = (): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     dispatch(setTasks(tasks));\n// };\n\n// export const updateTask = (tasks: Task[]): AppThunk => dispatch => {\n//     localStorage.setItem('tasks', JSON.stringify(tasks));\n//     dispatch(updateTaskInState(tasks));\n// };\n\n// export const deleteTask = (taskId: string): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = tasks.filter((task: Task) => task.id !== taskId);\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(deleteTaskInState(taskId));\n// };\n\n// export const addTask = (task: Task): AppThunk => dispatch => {\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\n//     const updatedTasks = [...tasks, task];\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n//     dispatch(addTaskInState(task));\n// };\n\n// export default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","boards","id","name","tasks","boardsSlice","reducers","setBoards","state","action","payload","localStorage","setItem","JSON","stringify","addBoard","push","updateBoard","map","board","deleteBoard","filter","addTaskToBoard","boardId","task","find","updateTaskInBoard","t","deleteTaskFromBoard","taskId","actions","fetchBoards","dispatch","getItem","parse","reducer"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/redux/tasksSlice.ts"],"sourcesContent":["// // import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// // interface Task {\r\n// //   id: string;\r\n// //   title: string;\r\n// //   description: string;\r\n// //   status: string;\r\n// // }\r\n\r\n// // interface TasksState {\r\n// //   tasks: Task[];\r\n// // }\r\n\r\n// // const initialState: TasksState = {\r\n// //   tasks: [],\r\n// // };\r\n\r\n// // const tasksSlice = createSlice({\r\n// //   name: 'tasks',\r\n// //   initialState,\r\n// //   reducers: {\r\n// //     setTasks(state, action: PayloadAction<Task[]>) {\r\n// //       state.tasks = action.payload;\r\n// //     },\r\n// //     addTask(state, action: PayloadAction<Task>) {\r\n// //       state.tasks.push(action.payload);\r\n// //     },\r\n// //     updateTask(state, action: PayloadAction<Task>) {\r\n// //       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n// //       if (index !== -1) {\r\n// //         state.tasks[index] = action.payload;\r\n// //       }\r\n// //     },\r\n// //     deleteTask(state, action: PayloadAction<string>) {\r\n// //       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n// //     },\r\n// //   },\r\n// // });\r\n\r\n// // export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\r\n// // export default tasksSlice.reducer;\r\n\r\n// import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import api from '../utils/api';\r\n\r\n// interface Task {\r\n//   id: string;\r\n//   title: string;\r\n//   description: string;\r\n//   status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//   tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//   tasks: [\r\n//     { id: '1', title: 'Görev 1', description: 'İlk görev', status: 'Yapılacak' },\r\n//   // ...\r\n//   ],\r\n// };\r\n\r\n// // Async Thunks\r\n// export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\r\n//   const response = await api.get('/tasks');\r\n//   return response.data;\r\n// });\r\n\r\n// export const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\r\n//   const response = await api.post('/tasks', task);\r\n//   return response.data;\r\n// });\r\n\r\n// export const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\r\n//   const response = await api.put(`/tasks/${task.id}`, task);\r\n//   return response.data;\r\n// });\r\n\r\n// export const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\r\n//   await api.delete(`/tasks/${id}`);\r\n//   return id;\r\n// });\r\n\r\n// const tasksSlice = createSlice({\r\n//   name: 'tasks',\r\n//   initialState,\r\n//   reducers: {},\r\n//   extraReducers: (builder) => {\r\n//     builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//     });\r\n//     builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n//       state.tasks.push(action.payload);\r\n//     });\r\n//     builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//       if (index !== -1) {\r\n//         state.tasks[index] = action.payload;\r\n//       }\r\n//     });\r\n//     builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\r\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//     });\r\n//   },\r\n// });\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\n//  import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n//  import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: []\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n//export default tasksSlice.reducer;\r\n\r\n\r\n// src/redux/tasksSlice.ts\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: []\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         }\r\n//     }\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n// src/redux/tasksSlice.ts\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: [\r\n//         { id: '1', title: 'Task 1', status: 'To Do' },\r\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\r\n//         { id: '3', title: 'Task 3', status: 'Done' },\r\n//     ],\r\n// };\r\n\r\n// export const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//     id: string;\r\n//     title: string;\r\n//     status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: [\r\n//         { id: '1', title: 'Task 1', status: 'To Do' },\r\n//         { id: '2', title: 'Task 2', status: 'In Progress' },\r\n//         { id: '3', title: 'Task 3', status: 'Done' },\r\n//     ],\r\n// };\r\n\r\n// export const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//             if (index !== -1) {\r\n//                 state.tasks[index] = action.payload;\r\n//             }\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.map((t: Task) => t.id === task.id ? task : t);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(updateTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { AppThunk } from './store';\r\n\r\n// interface Task {\r\n//   id: string;\r\n//   title: string;\r\n//   status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//   tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//   tasks: [\r\n//             { id: '4', title: 'Task 4', status: 'To Do' },\r\n//              { id: '2', title: 'Task 2', status: 'In Progress' },\r\n//             { id: '3', title: 'Task 3', status: 'Done' },],\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//   name: 'tasks',\r\n//   initialState,\r\n//   reducers: {\r\n//     setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//     },\r\n//     addTask: (state, action: PayloadAction<Task>) => {\r\n//       state.tasks.push(action.payload);\r\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n//     },\r\n//     updateTaskInState: (state, action: PayloadAction<Task[]>) => {\r\n//       state.tasks = action.payload;\r\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n//     },\r\n//     deleteTask: (state, action: PayloadAction<string>) => {\r\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//       localStorage.setItem('tasks', JSON.stringify(state.tasks));\r\n//     }\r\n//   },\r\n// });\r\n\r\n// export const { setTasks, addTask, updateTaskInState, deleteTask } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//   const tasks = localStorage.getItem('tasks');\r\n//   if (tasks) {\r\n//     dispatch(setTasks(JSON.parse(tasks)));\r\n//   }\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk } from './store';\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: string;\r\n}\r\n\r\ninterface Board {\r\n  id: string;\r\n  name: string;\r\n  tasks: Task[];\r\n}\r\n\r\ninterface BoardsState {\r\n  boards: Board[];\r\n}\r\n\r\nconst initialState: BoardsState = {\r\n  boards: [\r\n    { id: '1', name: 'Pano 1', tasks: [] },\r\n    { id: '2', name: 'Pano 2', tasks: [] },\r\n  ],\r\n};\r\n\r\nconst boardsSlice = createSlice({\r\n  name: 'boards',\r\n  initialState,\r\n  reducers: {\r\n    setBoards: (state, action: PayloadAction<Board[]>) => {\r\n      state.boards = action.payload;\r\n      localStorage.setItem('boards', JSON.stringify(state.boards));\r\n    },\r\n    addBoard: (state, action: PayloadAction<Board>) => {\r\n      state.boards.push(action.payload);\r\n      localStorage.setItem('boards', JSON.stringify(state.boards));\r\n    },\r\n    updateBoard: (state, action: PayloadAction<Board>) => {\r\n      state.boards = state.boards.map(board =>\r\n        board.id === action.payload.id ? action.payload : board\r\n      );\r\n      localStorage.setItem('boards', JSON.stringify(state.boards));\r\n    },\r\n    deleteBoard: (state, action: PayloadAction<string>) => {\r\n      state.boards = state.boards.filter(board => board.id !== action.payload);\r\n      localStorage.setItem('boards', JSON.stringify(state.boards));\r\n    },\r\n    addTaskToBoard: (state, action: PayloadAction<{ boardId: string, task: Task }>) => {\r\n      const { boardId, task } = action.payload;\r\n      const board = state.boards.find(board => board.id === boardId);\r\n      if (board) {\r\n        board.tasks.push(task);\r\n        localStorage.setItem('boards', JSON.stringify(state.boards));\r\n      }\r\n    },\r\n    updateTaskInBoard: (state, action: PayloadAction<{ boardId: string, task: Task }>) => {\r\n      const { boardId, task } = action.payload;\r\n      const board = state.boards.find(board => board.id === boardId);\r\n      if (board) {\r\n        board.tasks = board.tasks.map(t => t.id === task.id ? task : t);\r\n        localStorage.setItem('boards', JSON.stringify(state.boards));\r\n      }\r\n    },\r\n    deleteTaskFromBoard: (state, action: PayloadAction<{ boardId: string, taskId: string }>) => {\r\n      const { boardId, taskId } = action.payload;\r\n      const board = state.boards.find(board => board.id === boardId);\r\n      if (board) {\r\n        board.tasks = board.tasks.filter(task => task.id !== taskId);\r\n        localStorage.setItem('boards', JSON.stringify(state.boards));\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  setBoards, \r\n  addBoard, \r\n  updateBoard, \r\n  deleteBoard, \r\n  addTaskToBoard, \r\n  updateTaskInBoard, \r\n  deleteTaskFromBoard \r\n} = boardsSlice.actions;\r\n\r\nexport const fetchBoards = (): AppThunk => dispatch => {\r\n  const boards = localStorage.getItem('boards');\r\n  if (boards) {\r\n    dispatch(setBoards(JSON.parse(boards)));\r\n  }\r\n};\r\n\r\nexport default boardsSlice.reducer;\r\n\r\n\r\n// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n// import { Task } from '../types';\r\n// import { AppThunk } from './store';\r\n\r\n// interface TasksState {\r\n//     tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//     tasks: [],\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//     name: 'tasks',\r\n//     initialState,\r\n//     reducers: {\r\n//         setTasks: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         updateTaskInState: (state, action: PayloadAction<Task[]>) => {\r\n//             state.tasks = action.payload;\r\n//         },\r\n//         deleteTaskInState: (state, action: PayloadAction<string>) => {\r\n//             state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//         },\r\n//         addTaskInState: (state, action: PayloadAction<Task>) => {\r\n//             state.tasks.push(action.payload);\r\n//         },\r\n//     },\r\n// });\r\n\r\n// export const { setTasks, updateTaskInState, deleteTaskInState, addTaskInState } = tasksSlice.actions;\r\n\r\n// export const fetchTasks = (): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     dispatch(setTasks(tasks));\r\n// };\r\n\r\n// export const updateTask = (tasks: Task[]): AppThunk => dispatch => {\r\n//     localStorage.setItem('tasks', JSON.stringify(tasks));\r\n//     dispatch(updateTaskInState(tasks));\r\n// };\r\n\r\n// export const deleteTask = (taskId: string): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = tasks.filter((task: Task) => task.id !== taskId);\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(deleteTaskInState(taskId));\r\n// };\r\n\r\n// export const addTask = (task: Task): AppThunk => dispatch => {\r\n//     const tasks = JSON.parse(localStorage.getItem('tasks') || '[]');\r\n//     const updatedTasks = [...tasks, task];\r\n//     localStorage.setItem('tasks', JSON.stringify(updatedTasks));\r\n//     dispatch(addTaskInState(task));\r\n// };\r\n\r\n// export default tasksSlice.reducer;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}