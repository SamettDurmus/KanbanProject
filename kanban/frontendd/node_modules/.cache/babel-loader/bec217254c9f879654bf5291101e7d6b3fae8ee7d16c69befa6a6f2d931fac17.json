{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\n// import { RootState, AppDispatch } from '../redux/store';\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\n\n// const KanbanBoard: React.FC = () => {\n//     const dispatch = useDispatch<AppDispatch>();\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\n//     const boards = useSelector((state: RootState) => state.tasks.boards);\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\n//     const [newBoardTitle, setNewBoardTitle] = useState('');\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\n\n//     useEffect(() => {\n//         dispatch(fetchTasks());\n//     }, [dispatch]);\n\n//     const handleDragEnd = (result: DropResult) => {\n//         if (!result.destination) return;\n\n//         const reorderedTasks = [...tasks];\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//         movedTask.status = result.destination.droppableId;\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//         dispatch(updateTaskInState(reorderedTasks));\n//     };\n\n//     const handleDeleteTask = (taskId: string) => {\n//         dispatch(deleteTask(taskId));\n//     };\n\n//     const handleAddTask = () => {\n//         const newTask = {\n//             id: Math.random().toString(36).substr(2, 9),\n//             title: newTaskTitle,\n//             status: 'To Do'\n//         };\n//         dispatch(addTask(newTask));\n//         setNewTaskTitle('');\n//     };\n\n//     const handleAddBoard = () => {\n//         dispatch(addBoard(newBoardTitle));\n//         setNewBoardTitle('');\n//     };\n\n//     const handleEditTask = (taskId: string) => {\n//         setEditingTaskId(taskId);\n//         const task = tasks.find(task => task.id === taskId);\n//         if (task) {\n//             setEditingTaskTitle(task.title);\n//             setEditingTaskStatus(task.status);\n//         }\n//     };\n\n//     const handleUpdateTask = () => {\n//         const updatedTasks = tasks.map(task => \n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\n//         );\n//         dispatch(updateTaskInState(updatedTasks));\n//         setEditingTaskId(null);\n//         setEditingTaskTitle('');\n//         setEditingTaskStatus('To Do');\n//     };\n\n//     return (\n//         <div>\n//             <input\n//                 type=\"text\"\n//                 value={newTaskTitle}\n//                 onChange={(e) => setNewTaskTitle(e.target.value)}\n//                 placeholder=\"Yeni görev ekle...\"\n//             />\n//             <button onClick={handleAddTask}>Ekle</button>\n\n//             <input\n//                 type=\"text\"\n//                 value={newBoardTitle}\n//                 onChange={(e) => setNewBoardTitle(e.target.value)}\n//                 placeholder=\"Yeni pano ekle...\"\n//             />\n//             <button onClick={handleAddBoard}>Pano Ekle</button>\n\n//             <DragDropContext onDragEnd={handleDragEnd}>\n//                 <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//                     {boards.map((board, index) => (\n//                         <Droppable droppableId={board} key={index}>\n//                             {(provided) => (\n//                                 <div\n//                                     {...provided.droppableProps}\n//                                     ref={provided.innerRef}\n//                                     style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\n//                                 >\n//                                     <h2>{board}</h2>\n//                                     {tasks\n//                                         .filter(task => task.status === board)\n//                                         .map((task, index) => (\n//                                             <Draggable key={task.id} draggableId={task.id} index={index}>\n//                                                 {(provided) => (\n//                                                     <div\n//                                                         ref={provided.innerRef}\n//                                                         {...provided.draggableProps}\n//                                                         {...provided.dragHandleProps}\n//                                                         style={{\n//                                                             marginBottom: '8px',\n//                                                             padding: '16px',\n//                                                             backgroundColor: 'white',\n//                                                             borderRadius: '4px',\n//                                                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                                                             ...provided.draggableProps.style\n//                                                         }}\n//                                                     >\n//                                                         {editingTaskId === task.id ? (\n//                                                             <div>\n//                                                                 <input\n//                                                                     type=\"text\"\n//                                                                     value={editingTaskTitle}\n//                                                                     onChange={(e) => setEditingTaskTitle(e.target.value)}\n//                                                                 />\n//                                                                 <select\n//                                                                     value={editingTaskStatus}\n//                                                                     onChange={(e) => setEditingTaskStatus(e.target.value)}\n//                                                                 >\n//                                                                     {boards.map((board) => (\n//                                                                         <option key={board} value={board}>\n//                                                                             {board}\n//                                                                         </option>\n//                                                                     ))}\n//                                                                 </select>\n//                                                                 <button onClick={handleUpdateTask}>Güncelle</button>\n//                                                             </div>\n//                                                         ) : (\n//                                                             <div>\n//                                                                 {task.title}\n//                                                                 <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\n//                                                                 <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\n//                                                             </div>\n//                                                         )}\n//                                                     </div>\n//                                                 )}\n//                                             </Draggable>\n//                                         ))}\n//                                     {provided.placeholder}\n//                                 </div>\n//                             )}\n//                         </Droppable>\n//                     ))}\n//                 </div>\n//             </DragDropContext>\n//         </div>\n//     );\n// };\n\n// export default KanbanBoard;\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks.tasks);\n  const [newTaskTitle, setNewTaskTitle] = useState('');\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [editingTaskTitle, setEditingTaskTitle] = useState('');\n  const [editingTaskStatus, setEditingTaskStatus] = useState('To Do');\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  const handleDragEnd = result => {\n    const {\n      destination,\n      source\n    } = result;\n    if (!destination) return;\n    if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n    const reorderedTasks = Array.from(tasks);\n    const [movedTask] = reorderedTasks.splice(source.index, 1);\n\n    // Update the task's status based on the destination droppableId\n    movedTask.status = destination.droppableId;\n    reorderedTasks.splice(destination.index, 0, movedTask);\n    dispatch(updateTaskInState(reorderedTasks));\n  };\n  const handleDeleteTask = taskId => {\n    dispatch(deleteTask(taskId));\n  };\n  const handleAddTask = () => {\n    const newTask = {\n      id: Math.random().toString(36).substr(2, 9),\n      // Generate unique ID\n      title: newTaskTitle,\n      status: 'To Do'\n    };\n    dispatch(addTask(newTask));\n    setNewTaskTitle('');\n  };\n  const handleEditTask = taskId => {\n    setEditingTaskId(taskId);\n    const task = tasks.find(task => task.id === taskId);\n    if (task) {\n      setEditingTaskTitle(task.title);\n      setEditingTaskStatus(task.status);\n    }\n  };\n  const handleUpdateTask = () => {\n    const updatedTasks = tasks.map(task => task.id === editingTaskId ? {\n      ...task,\n      title: editingTaskTitle,\n      status: editingTaskStatus\n    } : task);\n    dispatch(updateTaskInState(updatedTasks));\n    setEditingTaskId(null);\n    setEditingTaskTitle('');\n    setEditingTaskStatus('To Do');\n  };\n  const statuses = ['To Do', 'In Progress', 'Done'];\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTaskTitle,\n        onChange: e => setNewTaskTitle(e.target.value),\n        placeholder: \"Yeni g\\xF6rev ekle...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddTask,\n        children: \"Ekle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: statuses.map((status, index) => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: status,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          style: {\n            margin: '0 10px',\n            padding: '10px',\n            width: '30%',\n            backgroundColor: '#f8f8f8',\n            borderRadius: '4px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 33\n          }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: {\n                marginBottom: '8px',\n                padding: '16px',\n                backgroundColor: 'white',\n                borderRadius: '4px',\n                boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n                ...provided.draggableProps.style\n              },\n              children: editingTaskId === task.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: editingTaskTitle,\n                  onChange: e => setEditingTaskTitle(e.target.value)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 61\n                }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                  value: editingTaskStatus,\n                  onChange: e => setEditingTaskStatus(e.target.value),\n                  children: statuses.map(status => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: status,\n                    children: status\n                  }, status, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 69\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 61\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: handleUpdateTask,\n                  children: \"G\\xFCncelle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 57\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [task.title, /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleEditTask(task.id),\n                  children: \"D\\xFCzenle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 292,\n                  columnNumber: 61\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDeleteTask(task.id),\n                  children: \"Sil\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 61\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 57\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 49\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 41\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 29\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"VNlJJL7k/FsDy0zfWvDoNnU36f4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchTasks","updateTaskInState","deleteTask","addTask","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","tasks","state","newTaskTitle","setNewTaskTitle","editingTaskId","setEditingTaskId","editingTaskTitle","setEditingTaskTitle","editingTaskStatus","setEditingTaskStatus","handleDragEnd","result","destination","source","droppableId","index","reorderedTasks","Array","from","movedTask","splice","status","handleDeleteTask","taskId","handleAddTask","newTask","id","Math","random","toString","substr","title","handleEditTask","task","find","handleUpdateTask","updatedTasks","map","statuses","onDragEnd","children","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","display","justifyContent","provided","droppableProps","ref","innerRef","margin","padding","width","backgroundColor","borderRadius","filter","draggableId","draggableProps","dragHandleProps","marginBottom","boxShadow","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchTasks, updateTaskInState, deleteTask, addTask, addBoard } from '../redux/tasksSlice';\r\n// import { RootState, AppDispatch } from '../redux/store';\r\n// import { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//     const dispatch = useDispatch<AppDispatch>();\r\n//     const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n//     const boards = useSelector((state: RootState) => state.tasks.boards);\r\n//     const [newTaskTitle, setNewTaskTitle] = useState('');\r\n//     const [newBoardTitle, setNewBoardTitle] = useState('');\r\n//     const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n//     const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n//     const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\r\n\r\n//     useEffect(() => {\r\n//         dispatch(fetchTasks());\r\n//     }, [dispatch]);\r\n\r\n//     const handleDragEnd = (result: DropResult) => {\r\n//         if (!result.destination) return;\r\n\r\n//         const reorderedTasks = [...tasks];\r\n//         const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//         movedTask.status = result.destination.droppableId;\r\n//         reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//         dispatch(updateTaskInState(reorderedTasks));\r\n//     };\r\n\r\n//     const handleDeleteTask = (taskId: string) => {\r\n//         dispatch(deleteTask(taskId));\r\n//     };\r\n\r\n//     const handleAddTask = () => {\r\n//         const newTask = {\r\n//             id: Math.random().toString(36).substr(2, 9),\r\n//             title: newTaskTitle,\r\n//             status: 'To Do'\r\n//         };\r\n//         dispatch(addTask(newTask));\r\n//         setNewTaskTitle('');\r\n//     };\r\n\r\n//     const handleAddBoard = () => {\r\n//         dispatch(addBoard(newBoardTitle));\r\n//         setNewBoardTitle('');\r\n//     };\r\n\r\n//     const handleEditTask = (taskId: string) => {\r\n//         setEditingTaskId(taskId);\r\n//         const task = tasks.find(task => task.id === taskId);\r\n//         if (task) {\r\n//             setEditingTaskTitle(task.title);\r\n//             setEditingTaskStatus(task.status);\r\n//         }\r\n//     };\r\n\r\n//     const handleUpdateTask = () => {\r\n//         const updatedTasks = tasks.map(task => \r\n//             task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\r\n//         );\r\n//         dispatch(updateTaskInState(updatedTasks));\r\n//         setEditingTaskId(null);\r\n//         setEditingTaskTitle('');\r\n//         setEditingTaskStatus('To Do');\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={newTaskTitle}\r\n//                 onChange={(e) => setNewTaskTitle(e.target.value)}\r\n//                 placeholder=\"Yeni görev ekle...\"\r\n//             />\r\n//             <button onClick={handleAddTask}>Ekle</button>\r\n\r\n//             <input\r\n//                 type=\"text\"\r\n//                 value={newBoardTitle}\r\n//                 onChange={(e) => setNewBoardTitle(e.target.value)}\r\n//                 placeholder=\"Yeni pano ekle...\"\r\n//             />\r\n//             <button onClick={handleAddBoard}>Pano Ekle</button>\r\n\r\n//             <DragDropContext onDragEnd={handleDragEnd}>\r\n//                 <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//                     {boards.map((board, index) => (\r\n//                         <Droppable droppableId={board} key={index}>\r\n//                             {(provided) => (\r\n//                                 <div\r\n//                                     {...provided.droppableProps}\r\n//                                     ref={provided.innerRef}\r\n//                                     style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n//                                 >\r\n//                                     <h2>{board}</h2>\r\n//                                     {tasks\r\n//                                         .filter(task => task.status === board)\r\n//                                         .map((task, index) => (\r\n//                                             <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                                                 {(provided) => (\r\n//                                                     <div\r\n//                                                         ref={provided.innerRef}\r\n//                                                         {...provided.draggableProps}\r\n//                                                         {...provided.dragHandleProps}\r\n//                                                         style={{\r\n//                                                             marginBottom: '8px',\r\n//                                                             padding: '16px',\r\n//                                                             backgroundColor: 'white',\r\n//                                                             borderRadius: '4px',\r\n//                                                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                                                             ...provided.draggableProps.style\r\n//                                                         }}\r\n//                                                     >\r\n//                                                         {editingTaskId === task.id ? (\r\n//                                                             <div>\r\n//                                                                 <input\r\n//                                                                     type=\"text\"\r\n//                                                                     value={editingTaskTitle}\r\n//                                                                     onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n//                                                                 />\r\n//                                                                 <select\r\n//                                                                     value={editingTaskStatus}\r\n//                                                                     onChange={(e) => setEditingTaskStatus(e.target.value)}\r\n//                                                                 >\r\n//                                                                     {boards.map((board) => (\r\n//                                                                         <option key={board} value={board}>\r\n//                                                                             {board}\r\n//                                                                         </option>\r\n//                                                                     ))}\r\n//                                                                 </select>\r\n//                                                                 <button onClick={handleUpdateTask}>Güncelle</button>\r\n//                                                             </div>\r\n//                                                         ) : (\r\n//                                                             <div>\r\n//                                                                 {task.title}\r\n//                                                                 <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n//                                                                 <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n//                                                             </div>\r\n//                                                         )}\r\n//                                                     </div>\r\n//                                                 )}\r\n//                                             </Draggable>\r\n//                                         ))}\r\n//                                     {provided.placeholder}\r\n//                                 </div>\r\n//                             )}\r\n//                         </Droppable>\r\n//                     ))}\r\n//                 </div>\r\n//             </DragDropContext>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchTasks, updateTaskInState, deleteTask, addTask } from '../redux/tasksSlice';\r\nimport { RootState, AppDispatch } from '../redux/store';\r\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n    const [newTaskTitle, setNewTaskTitle] = useState('');\r\n    const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\r\n    const [editingTaskTitle, setEditingTaskTitle] = useState('');\r\n    const [editingTaskStatus, setEditingTaskStatus] = useState<string>('To Do');\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks());\r\n    }, [dispatch]);\r\n\r\n    const handleDragEnd = (result: DropResult) => {\r\n        const { destination, source } = result;\r\n\r\n        if (!destination) return;\r\n        \r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        const reorderedTasks = Array.from(tasks);\r\n        const [movedTask] = reorderedTasks.splice(source.index, 1);\r\n\r\n        // Update the task's status based on the destination droppableId\r\n        movedTask.status = destination.droppableId;\r\n\r\n        reorderedTasks.splice(destination.index, 0, movedTask);\r\n\r\n        dispatch(updateTaskInState(reorderedTasks));\r\n    };\r\n\r\n    const handleDeleteTask = (taskId: string) => {\r\n        dispatch(deleteTask(taskId));\r\n    };\r\n\r\n    const handleAddTask = () => {\r\n        const newTask = {\r\n            id: Math.random().toString(36).substr(2, 9), // Generate unique ID\r\n            title: newTaskTitle,\r\n            status: 'To Do'\r\n        };\r\n        dispatch(addTask(newTask));\r\n        setNewTaskTitle('');\r\n    };\r\n\r\n    const handleEditTask = (taskId: string) => {\r\n        setEditingTaskId(taskId);\r\n        const task = tasks.find(task => task.id === taskId);\r\n        if (task) {\r\n            setEditingTaskTitle(task.title);\r\n            setEditingTaskStatus(task.status);\r\n        }\r\n    };\r\n\r\n    const handleUpdateTask = () => {\r\n        const updatedTasks = tasks.map(task => \r\n            task.id === editingTaskId ? { ...task, title: editingTaskTitle, status: editingTaskStatus } : task\r\n        );\r\n        dispatch(updateTaskInState(updatedTasks));\r\n        setEditingTaskId(null);\r\n        setEditingTaskTitle('');\r\n        setEditingTaskStatus('To Do');\r\n    };\r\n\r\n    const statuses = ['To Do', 'In Progress', 'Done'];\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newTaskTitle}\r\n                    onChange={(e) => setNewTaskTitle(e.target.value)}\r\n                    placeholder=\"Yeni görev ekle...\"\r\n                />\r\n                <button onClick={handleAddTask}>Ekle</button>\r\n            </div>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                {statuses.map((status, index) => (\r\n                    <Droppable droppableId={status} key={index}>\r\n                        {(provided) => (\r\n                            <div\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                style={{ margin: '0 10px', padding: '10px', width: '30%', backgroundColor: '#f8f8f8', borderRadius: '4px' }}\r\n                            >\r\n                                <h2>{status}</h2>\r\n                                {tasks\r\n                                    .filter(task => task.status === status)\r\n                                    .map((task, index) => (\r\n                                        <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={{\r\n                                                        marginBottom: '8px',\r\n                                                        padding: '16px',\r\n                                                        backgroundColor: 'white',\r\n                                                        borderRadius: '4px',\r\n                                                        boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n                                                        ...provided.draggableProps.style\r\n                                                    }}\r\n                                                >\r\n                                                    {editingTaskId === task.id ? (\r\n                                                        <div>\r\n                                                            <input\r\n                                                                type=\"text\"\r\n                                                                value={editingTaskTitle}\r\n                                                                onChange={(e) => setEditingTaskTitle(e.target.value)}\r\n                                                            />\r\n                                                            <select\r\n                                                                value={editingTaskStatus}\r\n                                                                onChange={(e) => setEditingTaskStatus(e.target.value)}\r\n                                                            >\r\n                                                                {statuses.map((status) => (\r\n                                                                    <option key={status} value={status}>\r\n                                                                        {status}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </select>\r\n                                                            <button onClick={handleUpdateTask}>Güncelle</button>\r\n                                                        </div>\r\n                                                    ) : (\r\n                                                        <div>\r\n                                                            {task.title}\r\n                                                            <button onClick={() => handleEditTask(task.id)}>Düzenle</button>\r\n                                                            <button onClick={() => handleDeleteTask(task.id)}>Sil</button>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,EAAEC,iBAAiB,EAAEC,UAAU,EAAEC,OAAO,QAAQ,qBAAqB;AAExF,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAoB,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExF,MAAMC,WAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAMC,QAAQ,GAAGb,WAAW,CAAc,CAAC;EAC3C,MAAMc,KAAK,GAAGb,WAAW,CAAEc,KAAgB,IAAKA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAClE,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACpD,MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}