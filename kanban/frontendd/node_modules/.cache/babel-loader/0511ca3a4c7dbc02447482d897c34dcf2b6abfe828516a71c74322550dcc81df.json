{"ast":null,"code":"// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n// interface Task {\n//   id: string;\n//   title: string;\n//   description: string;\n//   status: string;\n// }\n\n// interface TasksState {\n//   tasks: Task[];\n// }\n\n// const initialState: TasksState = {\n//   tasks: [],\n// };\n\n// const tasksSlice = createSlice({\n//   name: 'tasks',\n//   initialState,\n//   reducers: {\n//     setTasks(state, action: PayloadAction<Task[]>) {\n//       state.tasks = action.payload;\n//     },\n//     addTask(state, action: PayloadAction<Task>) {\n//       state.tasks.push(action.payload);\n//     },\n//     updateTask(state, action: PayloadAction<Task>) {\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\n//       if (index !== -1) {\n//         state.tasks[index] = action.payload;\n//       }\n//     },\n//     deleteTask(state, action: PayloadAction<string>) {\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\n//     },\n//   },\n// });\n\n// export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\n// export default tasksSlice.reducer;\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../utils/api';\nconst initialState = {\n  tasks: []\n};\n\n// Async Thunks\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\n  const response = await api.get('/tasks');\n  return response.data;\n});\nexport const createTask = createAsyncThunk('tasks/createTask', async task => {\n  const response = await api.post('/tasks', task);\n  return response.data;\n});\nexport const updateTask = createAsyncThunk('tasks/updateTask', async task => {\n  const response = await api.put(`/tasks/${task.id}`, task);\n  return response.data;\n});\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async id => {\n  await api.delete(`/tasks/${id}`);\n  return id;\n});\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTasks.fulfilled, (state, action) => {\n      state.tasks = action.payload;\n    });\n    builder.addCase(createTask.fulfilled, (state, action) => {\n      state.tasks.push(action.payload);\n    });\n    builder.addCase(updateTask.fulfilled, (state, action) => {\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index !== -1) {\n        state.tasks[index] = action.payload;\n      }\n    });\n    builder.addCase(deleteTask.fulfilled, (state, action) => {\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n    });\n  }\n});\nexport default tasksSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","initialState","tasks","fetchTasks","response","get","data","createTask","task","post","updateTask","put","id","deleteTask","delete","tasksSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","push","index","findIndex","filter","reducer"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/redux/tasksSlice.ts"],"sourcesContent":["// import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// interface Task {\r\n//   id: string;\r\n//   title: string;\r\n//   description: string;\r\n//   status: string;\r\n// }\r\n\r\n// interface TasksState {\r\n//   tasks: Task[];\r\n// }\r\n\r\n// const initialState: TasksState = {\r\n//   tasks: [],\r\n// };\r\n\r\n// const tasksSlice = createSlice({\r\n//   name: 'tasks',\r\n//   initialState,\r\n//   reducers: {\r\n//     setTasks(state, action: PayloadAction<Task[]>) {\r\n//       state.tasks = action.payload;\r\n//     },\r\n//     addTask(state, action: PayloadAction<Task>) {\r\n//       state.tasks.push(action.payload);\r\n//     },\r\n//     updateTask(state, action: PayloadAction<Task>) {\r\n//       const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n//       if (index !== -1) {\r\n//         state.tasks[index] = action.payload;\r\n//       }\r\n//     },\r\n//     deleteTask(state, action: PayloadAction<string>) {\r\n//       state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const { setTasks, addTask, updateTask, deleteTask } = tasksSlice.actions;\r\n// export default tasksSlice.reducer;\r\n\r\nimport { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../utils/api';\r\n\r\ninterface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: string;\r\n}\r\n\r\ninterface TasksState {\r\n  tasks: Task[];\r\n}\r\n\r\nconst initialState: TasksState = {\r\n  tasks: [],\r\n};\r\n\r\n// Async Thunks\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {\r\n  const response = await api.get('/tasks');\r\n  return response.data;\r\n});\r\n\r\nexport const createTask = createAsyncThunk('tasks/createTask', async (task: Task) => {\r\n  const response = await api.post('/tasks', task);\r\n  return response.data;\r\n});\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (task: Task) => {\r\n  const response = await api.put(`/tasks/${task.id}`, task);\r\n  return response.data;\r\n});\r\n\r\nexport const deleteTask = createAsyncThunk('tasks/deleteTask', async (id: string) => {\r\n  await api.delete(`/tasks/${id}`);\r\n  return id;\r\n});\r\n\r\nconst tasksSlice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchTasks.fulfilled, (state, action: PayloadAction<Task[]>) => {\r\n      state.tasks = action.payload;\r\n    });\r\n    builder.addCase(createTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n      state.tasks.push(action.payload);\r\n    });\r\n    builder.addCase(updateTask.fulfilled, (state, action: PayloadAction<Task>) => {\r\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.tasks[index] = action.payload;\r\n      }\r\n    });\r\n    builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<string>) => {\r\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\r\n    });\r\n  },\r\n});\r\n\r\nexport default tasksSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}