{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\90549\\\\Desktop\\\\kanban\\\\kanban-board\\\\frontend\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\n// // import React from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// // import React, { useEffect } from 'react';\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// // import { useDispatch, useSelector } from 'react-redux';\n// // import { RootState } from '../redux/store';\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// // const KanbanBoard: React.FC = () => {\n// //   const dispatch = useDispatch();\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n// //   useEffect(() => {\n// //     dispatch(fetchTasks());\n// //   }, [dispatch]);\n\n// //   const handleDragEnd = (result: any) => {\n// //     if (!result.destination) return;\n\n// //     const reorderedTasks = [...tasks];\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n// //     movedTask.status = result.destination.droppableId;\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n// //     dispatch(updateTask(movedTask));\n// //   };\n\n// //   return (\n// //     <DragDropContext onDragEnd={handleDragEnd}>\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\n// //           <Droppable key={status} droppableId={status}>\n// //             {(provided) => (\n// //               <div\n// //                 {...provided.droppableProps}\n// //                 ref={provided.innerRef}\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n// //               >\n// //                 <h3>{status}</h3>\n// //                 {tasks\n// //                   .filter(task => task.status === status)\n// //                   .map((task, index) => (\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\n// //                       {(provided) => (\n// //                         <div\n// //                           ref={provided.innerRef}\n// //                           {...provided.draggableProps}\n// //                           {...provided.dragHandleProps}\n// //                           style={{\n// //                             ...provided.draggableProps.style,\n// //                             padding: '16px',\n// //                             margin: '4px',\n// //                             backgroundColor: 'white',\n// //                             borderRadius: '4px',\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n// //                           }}\n// //                         >\n// //                           <h4>{task.title}</h4>\n// //                           <p>{task.description}</p>\n// //                         </div>\n// //                       )}\n// //                     </Draggable>\n// //                   ))}\n// //                 {provided.placeholder}\n// //               </div>\n// //             )}\n// //           </Droppable>\n// //         ))}\n// //       </div>\n// //     </DragDropContext>\n// //   );\n// // };\n\n// // export default KanbanBoard;\n\n// import React, { useEffect } from 'react';\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\n\n// const KanbanBoard: React.FC = () => {\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\n\n//   useEffect(() => {\n//     dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   const handleDragEnd = (result: any) => {\n//     if (!result.destination) return;\n\n//     const reorderedTasks = [...tasks];\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n//     movedTask.status = result.destination.droppableId;\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\n\n//     dispatch(updateTask(movedTask));\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={handleDragEnd}>\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n//         {['To Do', 'In Progress', 'Done'].map(status => (\n//           <Droppable key={status} droppableId={status}>\n//             {(provided) => (\n//               <div\n//                 {...provided.droppableProps}\n//                 ref={provided.innerRef}\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\n//               >\n//                 <h3>{status}</h3>\n//                 {tasks\n//                   .filter(task => task.status === status)\n//                   .map((task, index) => (\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\n//                       {(provided) => (\n//                         <div\n//                           ref={provided.innerRef}\n//                           {...provided.draggableProps}\n//                           {...provided.dragHandleProps}\n//                           style={{\n//                             ...provided.draggableProps.style,\n//                             padding: '16px',\n//                             margin: '4px',\n//                             backgroundColor: 'white',\n//                             borderRadius: '4px',\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\n//                           }}\n//                         >\n//                           <h4>{task.title}</h4>\n//                           <p>{task.description}</p>\n//                         </div>\n//                       )}\n//                     </Draggable>\n//                   ))}\n//                 {provided.placeholder}\n//               </div>\n//             )}\n//           </Droppable>\n//         ))}\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default KanbanBoard;\n\n// src/components/KanbanBoard.tsx\n\nimport React, { useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchTasks, updateTask } from '../redux/tasksSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanBoard = () => {\n  _s();\n  const dispatch = useDispatch();\n  const tasks = useSelector(state => state.tasks);\n\n  // Örnek verileri ilk başta Local Storage'a eklemek için\n  useEffect(() => {\n    const sampleTasks = [{\n      id: '1',\n      title: 'Görev 1',\n      status: 'To Do'\n    }, {\n      id: '2',\n      title: 'Görev 2',\n      status: 'In Progress'\n    }, {\n      id: '3',\n      title: 'Görev 3',\n      status: 'Done'\n    }];\n    if (!localStorage.getItem('tasks')) {\n      localStorage.setItem('tasks', JSON.stringify(sampleTasks));\n    }\n  }, []);\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n  const handleDragEnd = result => {\n    if (!result.destination) return;\n    const reorderedTasks = [...tasks];\n    const [movedTask] = reorderedTasks.splice(result.source.index, 1);\n    movedTask.status = result.destination.droppableId;\n    reorderedTasks.splice(result.destination.index, 0, movedTask);\n    dispatch(updateTask(movedTask));\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: ['To Do', 'In Progress', 'Done'].map(status => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: status,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          style: {\n            width: 300,\n            minHeight: 500,\n            border: '1px solid lightgrey',\n            borderRadius: '2px',\n            padding: '8px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 33\n          }, this), tasks.filter(task => task.status === status).map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: task.id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              style: {\n                userSelect: 'none',\n                padding: 16,\n                margin: '0 0 8px 0',\n                minHeight: '50px',\n                backgroundColor: '#fff',\n                border: '1px solid lightgrey',\n                borderRadius: '2px',\n                ...provided.draggableProps.style\n              },\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 49\n            }, this)\n          }, task.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 41\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 29\n        }, this)\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 9\n  }, this);\n};\n_s(KanbanBoard, \"ELpD2zYn0UZYzm1I+415aCM2zYo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useEffect","DragDropContext","Droppable","Draggable","useDispatch","useSelector","fetchTasks","updateTask","jsxDEV","_jsxDEV","KanbanBoard","_s","dispatch","tasks","state","sampleTasks","id","title","status","localStorage","getItem","setItem","JSON","stringify","handleDragEnd","result","destination","reorderedTasks","movedTask","splice","source","index","droppableId","onDragEnd","children","style","display","justifyContent","map","provided","droppableProps","ref","innerRef","width","minHeight","border","borderRadius","padding","fileName","_jsxFileName","lineNumber","columnNumber","filter","task","draggableId","draggableProps","dragHandleProps","userSelect","margin","backgroundColor","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/90549/Desktop/kanban/kanban-board/frontend/src/components/KanbanBoard.tsx"],"sourcesContent":["// // import React from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// // import React, { useEffect } from 'react';\r\n// // import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// // import { useDispatch, useSelector } from 'react-redux';\r\n// // import { RootState } from '../redux/store';\r\n// // import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// // const KanbanBoard: React.FC = () => {\r\n// //   const dispatch = useDispatch();\r\n// //   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n// //   useEffect(() => {\r\n// //     dispatch(fetchTasks());\r\n// //   }, [dispatch]);\r\n\r\n// //   const handleDragEnd = (result: any) => {\r\n// //     if (!result.destination) return;\r\n\r\n// //     const reorderedTasks = [...tasks];\r\n// //     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n// //     movedTask.status = result.destination.droppableId;\r\n// //     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n// //     dispatch(updateTask(movedTask));\r\n// //   };\r\n\r\n// //   return (\r\n// //     <DragDropContext onDragEnd={handleDragEnd}>\r\n// //       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n// //         {['To Do', 'In Progress', 'Done'].map(status => (\r\n// //           <Droppable key={status} droppableId={status}>\r\n// //             {(provided) => (\r\n// //               <div\r\n// //                 {...provided.droppableProps}\r\n// //                 ref={provided.innerRef}\r\n// //                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n// //               >\r\n// //                 <h3>{status}</h3>\r\n// //                 {tasks\r\n// //                   .filter(task => task.status === status)\r\n// //                   .map((task, index) => (\r\n// //                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n// //                       {(provided) => (\r\n// //                         <div\r\n// //                           ref={provided.innerRef}\r\n// //                           {...provided.draggableProps}\r\n// //                           {...provided.dragHandleProps}\r\n// //                           style={{\r\n// //                             ...provided.draggableProps.style,\r\n// //                             padding: '16px',\r\n// //                             margin: '4px',\r\n// //                             backgroundColor: 'white',\r\n// //                             borderRadius: '4px',\r\n// //                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n// //                           }}\r\n// //                         >\r\n// //                           <h4>{task.title}</h4>\r\n// //                           <p>{task.description}</p>\r\n// //                         </div>\r\n// //                       )}\r\n// //                     </Draggable>\r\n// //                   ))}\r\n// //                 {provided.placeholder}\r\n// //               </div>\r\n// //             )}\r\n// //           </Droppable>\r\n// //         ))}\r\n// //       </div>\r\n// //     </DragDropContext>\r\n// //   );\r\n// // };\r\n\r\n// // export default KanbanBoard;\r\n\r\n// import React, { useEffect } from 'react';\r\n// import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { RootState, AppDispatch } from '../redux/store'; // AppDispatch tipini içe aktarın\r\n// import { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\n// const KanbanBoard: React.FC = () => {\r\n//   const dispatch: AppDispatch = useDispatch(); // Burada dispatch'i AppDispatch olarak tipleyin\r\n//   const tasks = useSelector((state: RootState) => state.tasks.tasks);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchTasks());\r\n//   }, [dispatch]);\r\n\r\n//   const handleDragEnd = (result: any) => {\r\n//     if (!result.destination) return;\r\n\r\n//     const reorderedTasks = [...tasks];\r\n//     const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n//     movedTask.status = result.destination.droppableId;\r\n//     reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n//     dispatch(updateTask(movedTask));\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={handleDragEnd}>\r\n//       <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n//         {['To Do', 'In Progress', 'Done'].map(status => (\r\n//           <Droppable key={status} droppableId={status}>\r\n//             {(provided) => (\r\n//               <div\r\n//                 {...provided.droppableProps}\r\n//                 ref={provided.innerRef}\r\n//                 style={{ margin: '8px', border: '1px solid lightgrey', borderRadius: '4px', width: '300px', minHeight: '500px' }}\r\n//               >\r\n//                 <h3>{status}</h3>\r\n//                 {tasks\r\n//                   .filter(task => task.status === status)\r\n//                   .map((task, index) => (\r\n//                     <Draggable key={task.id} draggableId={task.id} index={index}>\r\n//                       {(provided) => (\r\n//                         <div\r\n//                           ref={provided.innerRef}\r\n//                           {...provided.draggableProps}\r\n//                           {...provided.dragHandleProps}\r\n//                           style={{\r\n//                             ...provided.draggableProps.style,\r\n//                             padding: '16px',\r\n//                             margin: '4px',\r\n//                             backgroundColor: 'white',\r\n//                             borderRadius: '4px',\r\n//                             boxShadow: '0 1px 3px rgba(0,0,0,0.2)',\r\n//                           }}\r\n//                         >\r\n//                           <h4>{task.title}</h4>\r\n//                           <p>{task.description}</p>\r\n//                         </div>\r\n//                       )}\r\n//                     </Draggable>\r\n//                   ))}\r\n//                 {provided.placeholder}\r\n//               </div>\r\n//             )}\r\n//           </Droppable>\r\n//         ))}\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default KanbanBoard;\r\n\r\n\r\n// src/components/KanbanBoard.tsx\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../redux/store';\r\nimport { fetchTasks, updateTask } from '../redux/tasksSlice';\r\n\r\nconst KanbanBoard: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const tasks = useSelector((state: RootState) => state.tasks);\r\n\r\n    // Örnek verileri ilk başta Local Storage'a eklemek için\r\n    useEffect(() => {\r\n        const sampleTasks = [\r\n            { id: '1', title: 'Görev 1', status: 'To Do' },\r\n            { id: '2', title: 'Görev 2', status: 'In Progress' },\r\n            { id: '3', title: 'Görev 3', status: 'Done' },\r\n        ];\r\n\r\n        if (!localStorage.getItem('tasks')) {\r\n            localStorage.setItem('tasks', JSON.stringify(sampleTasks));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasks());\r\n    }, [dispatch]);\r\n\r\n    const handleDragEnd = (result: any) => {\r\n        if (!result.destination) return;\r\n\r\n        const reorderedTasks = [...tasks];\r\n        const [movedTask] = reorderedTasks.splice(result.source.index, 1);\r\n        movedTask.status = result.destination.droppableId;\r\n        reorderedTasks.splice(result.destination.index, 0, movedTask);\r\n\r\n        dispatch(updateTask(movedTask));\r\n    };\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                {['To Do', 'In Progress', 'Done'].map(status => (\r\n                    <Droppable key={status} droppableId={status}>\r\n                        {(provided) => (\r\n                            <div\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                                style={{ width: 300, minHeight: 500, border: '1px solid lightgrey', borderRadius: '2px', padding: '8px' }}\r\n                            >\r\n                                <h2>{status}</h2>\r\n                                {tasks\r\n                                    .filter(task => task.status === status)\r\n                                    .map((task, index) => (\r\n                                        <Draggable key={task.id} draggableId={task.id} index={index}>\r\n                                            {(provided) => (\r\n                                                <div\r\n                                                    ref={provided.innerRef}\r\n                                                    {...provided.draggableProps}\r\n                                                    {...provided.dragHandleProps}\r\n                                                    style={{\r\n                                                        userSelect: 'none',\r\n                                                        padding: 16,\r\n                                                        margin: '0 0 8px 0',\r\n                                                        minHeight: '50px',\r\n                                                        backgroundColor: '#fff',\r\n                                                        border: '1px solid lightgrey',\r\n                                                        borderRadius: '2px',\r\n                                                        ...provided.draggableProps.style\r\n                                                    }}\r\n                                                >\r\n                                                    {task.title}\r\n                                                </div>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,SAASC,UAAU,EAAEC,UAAU,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,WAAq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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}